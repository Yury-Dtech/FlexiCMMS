@page "/orders"
@implements IAsyncDisposable

@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using BlazorTool.Client.Components
@using System.Text
@using System.Linq
@using System.Diagnostics
@using Telerik.DataSource.Extensions
@using Telerik.Blazor
@using Telerik.Blazor.Components
@inject NavigationManager Navigation
@inject BlazorTool.Client.Services.ApiServiceClient apiService
@inject UserState UserState
@inject IStringLocalizer<Resources.UIStrings> Localizer
@inject ViewSettingsService ViewSettingsService
@using Microsoft.AspNetCore.Components.Routing

<CheckSession apiService="@apiService" UserState="@UserState" />

<TelerikNotification @ref="@NotificationReference" Class="my-telerik-notification"
                         HorizontalPosition="@NotificationHorizontalPosition.Center"
                         VerticalPosition="@NotificationVerticalPosition.Top" />
    <div class="filter-controls-row">
@if (isDevicesLoading)
{
        @Localizer["OrdersPage_LoadingDevicesList"]
    <TelerikLoader Visible="@isDevicesLoading"/>
}
else
{
        <div class="devices">
            <label>@Localizer["OrdersPage_Devices"]</label>
            <TelerikMultiSelect Data="@devices"
                              @bind-Value="@selectedDeviceIds"
                              ValueField="@nameof(Device.MachineID)"
                              TextField="@nameof(Device.AssetNo)"
                              MaxAllowedTags="@MaxAllowedTags"
                              Placeholder="@Localizer["OrdersPage_SelectDevices"]"
                              AutoClose="false"
                              OnChange="@OnMultiValueClosed"
                              Width="500px"
                                Filterable="true"
                                FilterOperator="@Telerik.Blazor.StringFilterOperator.Contains"
                              ShowClearButton="true">
            </TelerikMultiSelect>
        </div>
        <div class="device-category" style="display:flex; align-items: center; gap:3px;">
            <label>@Localizer["OrdersPage_DeviceCategory"]:</label>
            <div style="display:inline;">
            <TelerikComboBox Data="@deviceCategories"
                             TextField="DeviceCategory"
                             @bind-Value="@selectedDeviceCategory"
                             Placeholder="@Localizer["OrdersPage_SelectCategory"]"
                             ShowClearButton="true"
                             Filterable="true"
                             OnChange="@OnCategoryChanged">
            </TelerikComboBox>
            </div>
        </div>
}
        <div class="active-only-switch" style="display:flex; align-items: center; gap:3px;">
            <label>@Localizer["Only_Active"]:</label>
                <TelerikSwitch @bind-Value=@ShowActiveOnlyOrders OnChange="@OnSwitchActiveChanged">

                </TelerikSwitch>
                </div>
                <RefreshButton onclick="@(()=>HardLoadData())">@Localizer["Scheduler_ReloadAllData"]</RefreshButton>
      
        @* Timer *@
        <div class="refresh-timer">
            <div class="input--timer-interval" style="display: @timerSetVisibility">
                <label>@Localizer["OrdersPage_RefreshInterval"]:</label>
                <TelerikNumericTextBox @bind-Value="@TimerInterval"
                                       Min="1"
                                       Max="60"
                                       Width="80px"
                                       OnChange="@(OnTimerIntervalChanged)"
                                       Size="sm"/>
                <span>@Localizer["OrdersPage_Minutes"]</span>
            </div>
            <Timer @ref="hardReloadTimer"
                   Interval="@HardReloadInterval"
                   OnTick="HardLoadDataTick"
                   AutoStart="true"
                   FireImmediately="false"
                   SkipIfBusy="true"
                   JitterMilliseconds="0"
                   SoftTickTimeout="@(TimeSpan.FromSeconds(1))">
                <ChildContent Context="ctx">
                    <div class="clickable-timer" onclick="@OnTimerClick">
                        Next update in: @(ctx.TimeLeft?.ToString("mm':'ss") ?? "-")<br />
                        Last update: @(ctx.LastTickAt?.LocalDateTime.ToLongTimeString() ?? "-")
                    </div>
                </ChildContent>
            </Timer>
        </div>
    </div>

<h3>@Localizer["OrdersPage_Orders"] (@ordersGrid?.FilteredRowsCount)</h3>
<div style="height:80vh">
@if (isOrdersLoading)
{
    <div>@Localizer["OrdersPage_LoadingOrderList"]</div>
}
else
{
    <OrdersGrid @ref="ordersGrid"
                OrdersForGrid="@OrdersForGrid"
                workOrderStates="@workOrderStates"
                OnOrderChanged="@OnOrderChanged"
                OnStateChanged="@(async (GridStateEventArgs<WorkOrder> args) => { _viewSettings.GridState = args.GridState; await SaveStateAsync(); })"
                isLoading="@isOrdersLoading" 
                PageSize="54"
                MenuItems="@MenuItems"
                OnMenuItemClick="@HandleMenuItemClick"
                OnRowContextMenu="@(()=>MakeContextMenu())" 
                UseVirtualScrollMode ="false"
                />
}


</div>

<TelerikWindow @bind-Visible="IsAddActivityWindowVisible" Modal="true" Width="500px">
	<WindowTitle>
		<strong>@Localizer["WorkOrder_AddActivity"]</strong>
	</WindowTitle>
	<WindowActions>
		<WindowAction Name="Close" />
	</WindowActions>
	<WindowContent>
		<AddActivityForm WorkOrderID="@(selectedWorkOrder.WorkOrderID)" OnActivityAdded="HandleActivityAdded" />
	</WindowContent>
</TelerikWindow>

<TelerikPopup @ref="@PopupRef"
              AnchorSelector=".popup-dep-target"
              AnimationType="@AnimationType.ZoomOut"
              AnimationDuration="200"
              Width="260px"
              Class="popup-dep"
              >
    <div class="popup-dep" style="text-align: center; padding:20px; ">
        <EditForm Model="@selectedWorkOrder" OnValidSubmit="@(async () => {await apiService.UpdateWorkOrderAsync(selectedWorkOrder); PopupRef?.Hide();})">
        <span><p>@Localizer["WorkOrder_OrderNo"] @selectedWorkOrder.WorkOrderID</p></span>
            <TelerikComboBox Data="@allDepartments"
                             @bind-Value="@(selectedWorkOrder.DepName )"
                             Placeholder="@Localizer["Scheduler_SelectDepartment"]"
                             Width="180px"
                             Filterable="true" />
            <div style="margin-top: 12px; display: flex; gap: 10px; justify-content: center;">
                <TelerikButton ButtonType="ButtonType.Submit">@Localizer["Move"]</TelerikButton>
            </div>
        </EditForm>
    </div>
</TelerikPopup>

<div class="popup-dep-target" style="position:fixed; left:@MenuPositionX; top:@MenuPositionY; z-index: 9999; "></div>

@code {



    private string ViewSettingsKey = ViewSettingsService.SettingsKeys["OrdersPage"]; 
    private ViewSettings<WorkOrder> _viewSettings = new();
    private TelerikPopup? PopupRef { get; set; }
    private bool isOrdersLoading = false;
    private bool isDevicesLoading = false;
    private bool ShowActiveOnlyOrders = true;
    private bool isAllOrdersLoaded = false;
    private List<WorkOrder> OrdersForGrid = new List<WorkOrder>();
    private List<int> selectedDeviceIds = new List<int>();
    private string? selectedState = "All";
    private string? selectedDeviceType = "All";
    private string? selectedDeviceCategory = "All";
    private List<Device> devices = new List<Device>();
    List<string?> deviceCategories = new List<string?>();
    List<string?> deviceTypes = new List<string?>();
    List<string>? workOrderStates = new List<string>();
    private List<Person> allPersons = new List<Person>();
    private List<string> personNames = new List<string>();
    private List<string> selectedPersons = new List<string>();
    private List<string> allDepartments = new List<string>();
    private List<WODict> dicts = new List<WODict>();
    private Person currentUser = new Person();
    private OrdersGrid ordersGrid = new ();
    private int? MaxAllowedTags { get; set; }
    private bool hasInitialized = false;
    private List<ContextMenuItem> MenuItems = new List<ContextMenuItem>();
    private bool HaveAnyTakenOrders = false;
    private string MenuPositionX { get; set; } = "50%";
    private string MenuPositionY { get; set; } = "50%";
    private WorkOrder selectedWorkOrder = new WorkOrder();
    private bool IsAddActivityWindowVisible { get; set; } = false;
    private int TimerInterval { get; set; } = 5;//minutes
    private BlazorTool.Client.Components.Timer? hardReloadTimer;
    private TimeSpan HardReloadInterval { get; set; }
    public TelerikNotification NotificationReference { get; set; } = new TelerikNotification();
    private string timerSetVisibility = "none";
    private bool _navSubscribed;
    private bool ThemeConstantsInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"[NAV] OrdersPage.razor: OnInitializedAsync at {DateTime.Now:HH:mm:ss}");
        HardReloadInterval = TimeSpan.FromMinutes(TimerInterval);
        if (!_navSubscribed)
        {
            Navigation.LocationChanged += OnLocationChanged;
            _navSubscribed = true;
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;

            Console.WriteLine("______Initialized ORDERS PAGE");
            _viewSettings = await ViewSettingsService.LoadSettingsAsync<WorkOrder>(ViewSettingsKey);
            RestoreCustomFilterState();
            HardReloadInterval = TimeSpan.FromMinutes(TimerInterval);

            await UserState.InitializationTask; // Ensure UserState is loaded
            if (!UserState.IsAuthenticated)
            {
                Navigation.NavigateTo("/login");
            }

            await HardLoadData(showLoading:true, isLoadDevices: true);

            // await LoadData();

            MakeContextMenu();

            await InvokeAsync(StateHasChanged);
            if (ordersGrid != null) await ordersGrid.ApplyStateAsync(_viewSettings.GridState);
        }
    }

    private async Task LoadData()
    {
        isOrdersLoading = true;
        StateHasChanged();
        if (devices == null || devices.Count == 0)
        {
            return; // No devices available, exit early
        }

        if (selectedDeviceIds == null)
        {
            selectedDeviceIds = new List<int>();
        }

        Console.WriteLine($"Selected devices count: {selectedDeviceIds.Count()}");
        if (selectedDeviceIds.Count == 0)
        {
            OrdersForGrid = (await apiService.GetWorkOrdersCachedAsync(active: ShowActiveOnlyOrders ? true : null)).ToList();
        }
        else
        {
            var filteredDevices = GetFilteredDevices();
            OrdersForGrid = await GetFilteredOrders(filteredDevices);
        }
        isOrdersLoading = false;
        StateHasChanged();

    }

    private async Task HardLoadData(bool showLoading = true, bool? isLoadDevices = false)
    {
        if (showLoading)
        {
            isDevicesLoading = isLoadDevices ?? true;
            isOrdersLoading = true;
            StateHasChanged();
        }
        dicts = await apiService.GetWODictionaries(UserState.PersonID, UserState.LangCode);
        allPersons = await apiService.GetAllPersons();
        if (isLoadDevices == true)
        {
            devices = await apiService.GetAllDevicesAsync();
            if (showLoading) isDevicesLoading = false;
        }
        if (!ShowActiveOnlyOrders) // load all orders only when viewing all orders
            isAllOrdersLoaded = true;

        if (selectedDeviceIds.Count == 0)
        {
            OrdersForGrid = (await apiService.GetWorkOrdersAsync(lang: UserState.LangCode, active: ShowActiveOnlyOrders ? true : null)).OrderByDescending(o => o.WorkOrderID).ToList();
        }
        else
        {
            OrdersForGrid = new List<WorkOrder>();
            foreach(var deviceId in selectedDeviceIds)
            {
                var loadedOrders = (await apiService.GetWorkOrdersAsync(lang: UserState.LangCode, deviceID: deviceId,  active: ShowActiveOnlyOrders ? true : null)).OrderByDescending(o => o.WorkOrderID).ToList();
                OrdersForGrid.AddRange(loadedOrders);
            }
        }        
        allDepartments = (await apiService.GetWODepartments()).Select(x=>x.Name).ToList();
        personNames = allPersons.Select(p => p.Name).ToList();
        currentUser.PersonId = UserState.PersonID ?? -1;
        currentUser.Name = UserState.UserName ?? string.Empty;            
        workOrderStates = OrdersForGrid.Select(o => o.WOState ?? string.Empty).Distinct().ToList();            
        deviceCategories = devices.Select(d => d.DeviceCategory).Distinct().ToList();
        deviceCategories?.Insert(0, "All");
        deviceTypes = devices.Select(d => d.Type).Distinct().ToList();
        deviceTypes?.Insert(0, "All");
        HaveAnyTakenOrders = (await apiService.GetWOTakenbyPerson(UserState.PersonID ?? 0)).Any();

        // Немедленный пересчет количества строк
        ordersGrid?.RefreshRowsCount(OrdersForGrid);

        if (showLoading)
        {            
            isOrdersLoading = false;
            StateHasChanged();
            if (hardReloadTimer != null)
            {
                await hardReloadTimer.RestartAsync(); // reset interval after manual reload
            }
        }
    }

    private async Task SaveStateAsync()
    {
        _viewSettings.SetCustomFilter("selectedDeviceIds", selectedDeviceIds);
        _viewSettings.SetCustomFilter("selectedDeviceCategory", selectedDeviceCategory);
        _viewSettings.SetCustomFilter("TimerInterval", TimerInterval);
        await ViewSettingsService.SaveSettingsAsync(ViewSettingsKey, _viewSettings);
    }

    private void RestoreCustomFilterState()
    {
        selectedDeviceIds = _viewSettings.GetCustomFilter("selectedDeviceIds", new List<int>());
        selectedDeviceCategory = _viewSettings.GetCustomFilter("selectedDeviceCategory", "All");
        TimerInterval = _viewSettings.GetCustomFilter("TimerInterval", 5);
    }

    private IEnumerable<Device> GetFilteredDevices()
    {
        if (devices == null || devices.Count == 0)
        {
            return new List<Device>();
        }

        // if (selectedDeviceIds.Count == 0)
        //     selectedDeviceIds.Add(devices.First().MachineID);

        return devices.Where(d =>
            (string.IsNullOrWhiteSpace(selectedDeviceCategory) || d.DeviceCategory == selectedDeviceCategory || selectedDeviceCategory == "All") &&
            // (string.IsNullOrWhiteSpace(selectedDeviceType) || d.Type == selectedDeviceType || selectedDeviceType == "All") &&
            (selectedDeviceIds.Count == 0 || selectedDeviceIds.Contains(d.MachineID))
        );
    }

    private async Task<List<WorkOrder>> GetFilteredOrders(IEnumerable<Device> devices)
    {
        List<WorkOrder> orders = new List<WorkOrder>();

        foreach(var device in devices)
        {
            var loadedOrders = (await apiService.GetWorkOrdersCachedAsync(deviceId: device.MachineID, active: ShowActiveOnlyOrders ? true : null)).ToList();
            orders.AddRange(loadedOrders);
        }
        return orders.OrderByDescending(o => o.WorkOrderID).ToList();

    }

    private void OnOrderChanged(SchedulerAppointment? editedAppointment)
    {
        if (editedAppointment == null) return;

        var index = OrdersForGrid.FindIndex(x => x.WorkOrderID == editedAppointment.AppointmentId);
        if (index >=0)
        {
            OrdersForGrid.RemoveAt(index);
            OrdersForGrid.Insert(index, editedAppointment);
        }
        else //new appointment
        {
            OrdersForGrid.Add(editedAppointment);
        }

        ordersGrid.RefreshGrid();
        StateHasChanged();
    }

    #region Filter events
    private async Task OnMultiValueClosed()
    {
        await LoadData();
        await SaveStateAsync();
    }

    async Task OnCategoryChanged()
    {
        if (string.IsNullOrWhiteSpace(selectedDeviceCategory))
        {
            selectedDeviceCategory = "All";
            selectedDeviceIds.Clear();
        }
        else
        {
            selectedDeviceIds = devices
                .Where(d => d.DeviceCategory == selectedDeviceCategory)
                .Select(d => d.MachineID)
                .ToList();
        }
        await LoadData();
        await SaveStateAsync();
    }

    async Task selectAllDevices()
    {
        selectedDeviceIds = devices.Select(d => d.MachineID).ToList();
        selectedDeviceCategory = "All";
        selectedDeviceType = "All";
        selectedState = "All";
        await LoadData();
        await SaveStateAsync();
    }
    #endregion

    private void MakeContextMenu()
    {
        string addActivityText = Localizer["WorkOrder_AddActivity"];
        string takeOrderText = Localizer["TakeOrder"];
        string assignToMyselfText = Localizer["AssignToMyself"];
        string moveToDepartment = Localizer["MoveToDepartment"];
        string openOrderText = Localizer["Scheduler_Open"];

        MenuItems = new List<ContextMenuItem>();
        MenuItems.Add(new ContextMenuItem { Text = openOrderText, CommandName = "OpenOrder", Icon = SvgIcon.FileAscx });

        if (UserState.HasPermission(PermissionType.AcT_Add))
            new ContextMenuItem { Text = addActivityText, CommandName = "AddActivity", Icon = SvgIcon.ClockArrowRotate };

        if (UserState.HasPermission(PermissionType.WO_SET_AssignedPerson))
            new ContextMenuItem { Text = assignToMyselfText, CommandName = "AssignToMyself", Icon = SvgIcon.Eye };

        if (UserState.HasPermission(PermissionType.WO_Edit))
            new ContextMenuItem { Text = moveToDepartment, CommandName = "MoveToDepartment", Icon = SvgIcon.ChevronDoubleRight };

        if(UserState.CanHaveManyActiveTake || !HaveAnyTakenOrders)
        {
            MenuItems.Add(new ContextMenuItem { Text = takeOrderText, CommandName = "TakeOrder", Icon = SvgIcon.Hand });
        }
    }

    private async Task HandleMenuItemClick(ContextMenuItemClickEventArgs<WorkOrder> args)
    {
        if (args == null) return;
        var workOrder = args.Item;
        var command = args.MenuItem?.CommandName;
        MenuPositionX = (args.MenuItem?.CursorX).ToString() + "px";
        MenuPositionY = (args.MenuItem?.CursorY - 70).ToString() + "px";
        if (workOrder == null || string.IsNullOrWhiteSpace(command))
        {
            return;
        }

        switch (command)
        {
            case "AddActivity":
                if (workOrder == null)
                {
                    return;
                }
                selectedWorkOrder = workOrder;
                IsAddActivityWindowVisible = true;
                break;
            case "TakeOrder":
                if (HaveAnyTakenOrders) return;
                var result = await apiService.TakeWorkOrderAsync(workOrder, UserState.PersonID);
                break;
            case "AssignToMyself":
                if (workOrder.AssignedPerson == UserState.UserName) return;
                workOrder.AssignedPerson = UserState.UserName ?? "";
                await apiService.UpdateWorkOrderAsync(workOrder);
                break;
            case "MoveToDepartment":
                selectedWorkOrder = workOrder;
                PopupRef?.Show();
                break;
            case "OpenOrder":
                selectedWorkOrder = workOrder;
                ordersGrid?.OpenWorkOrderWindow(workOrder);
                break;
        }
    }

    private async Task HandleActivityAdded(Models.Activity newActivity)
    {
        if (newActivity != null) //------------------- NOWA AKTYWNOŚĆ
        {
            if (selectedWorkOrder != null)
            {
                await apiService.RefreshWorkOrderInCacheAsync(selectedWorkOrder.WorkOrderID);
                await LoadData();
            }
        }
        else
        {
            Console.WriteLine("Failed to add activity.");
        }
        IsAddActivityWindowVisible = false;
    }

    #region Refresh data timer
    private async Task HardLoadDataTick()
    {
        var old_count = OrdersForGrid.Count();
        await HardLoadData(false); // silent refresh
        Console.WriteLine($"[TIMER] OrdersPage HardLoadDataTick at {DateTime.Now:HH:mm:ss}, old count: {old_count}, new count: {OrdersForGrid.Count()}");
        var new_count = OrdersForGrid.Count();
        if (new_count == old_count) return; // no change, skip
        // await LoadData(); //reapply filters
        ShowNotification($"{new_count - old_count} {Localizer["New_Orders"]}", NotificationTypeEnum.Info); 
    }

    private async Task OnTimerIntervalChanged()
    {        
        HardReloadInterval = TimeSpan.FromMinutes(TimerInterval);
        await SaveStateAsync();
        if (hardReloadTimer != null)
        {
            await hardReloadTimer.RestartAsync();
        }
    }

    private void OnTimerClick()
    {
        if (string.IsNullOrEmpty(timerSetVisibility))
            timerSetVisibility = "none";
        else
            timerSetVisibility = string.Empty;
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // если ушли со страницы /orders – останавливаем таймер (без ожидания)
        if (!e.Location.Contains("/orders", StringComparison.OrdinalIgnoreCase))
        {
            _ = DisposeTimerAsync();
        }
    }

    private async Task DisposeTimerAsync()
    {
        try
        {
            if (hardReloadTimer != null)
            {
                await hardReloadTimer.DisposeAsync();
                hardReloadTimer = null;
            }
        }
        catch { }
    }

    public async ValueTask DisposeAsync()
    {
        if (_navSubscribed)
        {
            Navigation.LocationChanged -= OnLocationChanged;
            _navSubscribed = false;
        }
        await DisposeTimerAsync();
    }

    #endregion timer
    private async Task OnSwitchActiveChanged()
    {
        if (!ShowActiveOnlyOrders && !isAllOrdersLoaded)
        {
            await HardLoadData(showLoading: true, isLoadDevices: false);
        }else
        {
            await LoadData();
        }
        ordersGrid.RefreshRowsCount(OrdersForGrid);
    }

    private void ShowNotification(string message, NotificationTypeEnum type)
    {
        switch (type)
        {
            case NotificationTypeEnum.Success:
                NotificationReference.Show(new NotificationModel
                {
                    Text = message,
                    ThemeColor = ThemeConstants.Notification.ThemeColor.Success,
                    CloseAfter = 3000,
                    Icon = SvgIcon.CheckCircle
                });
                break;
            case NotificationTypeEnum.Error:
                NotificationReference.Show(new NotificationModel
                {
                    Text = message,
                    ThemeColor = ThemeConstants.Notification.ThemeColor.Error,
                    CloseAfter = 5000,
                    Icon = SvgIcon.WarningCircle
                });
                break;
            case NotificationTypeEnum.Info:
                NotificationReference.Show(new NotificationModel
                {
                    Text = message,
                    ThemeColor = ThemeConstants.Notification.ThemeColor.Info,
                    CloseAfter = 5000,
                    Icon = SvgIcon.InfoCircle
                });
                break;
            case NotificationTypeEnum.Warning:
                NotificationReference.Show(new NotificationModel
                {
                    Text = message,
                    ThemeColor = ThemeConstants.Notification.ThemeColor.Warning,
                    CloseAfter = 3000,
                    Icon = SvgIcon.ExclamationCircle
                });
                break;
        }
    }
}
