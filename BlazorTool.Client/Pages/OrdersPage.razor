@page "/orders"

@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using BlazorTool.Client.Components
@using System.Text
@using System.Linq
@using System.Diagnostics
@using Telerik.DataSource.Extensions
@using Telerik.Blazor
@using Telerik.Blazor.Components
@inject NavigationManager Navigation
@inject BlazorTool.Client.Services.ApiServiceClient apiService
@inject UserState UserState
@inject IStringLocalizer<Resources.UIStrings> Localizer
@inject ViewSettingsService ViewSettingsService

<CheckSession apiService="@apiService" UserState="@UserState" />
<label>@Localizer["OrdersPage_Devices"]</label>

@if (isDevicesLoading)
{
    <TelerikLoaderContainer Visible="@isDevicesLoading" Text="@Localizer["OrdersPage_LoadingDevicesList"]"></TelerikLoaderContainer>
}
else
{
    <div class="filter-controls-row">
        <div>
            <TelerikRadioGroup Data="@TagModes"
                               @bind-Value="@TagMode"
                               ValueField="@nameof(Tags.Mode)"
                               TextField="@nameof(Tags.Description)"
                               Layout="RadioGroupLayout.Horizontal">
            </TelerikRadioGroup>

            <TelerikMultiSelect Data="@devices"
                              @bind-Value="@selectedDeviceIds"
                              ValueField="@nameof(Device.MachineID)"
                              TextField="@nameof(Device.AssetNo)"
                              TagMode="@TagMode"
                              MaxAllowedTags="@MaxAllowedTags"
                              Placeholder="@Localizer["OrdersPage_SelectDevices"]"
                              AutoClose="false"
                              OnClose="@OnMultiValueClosed"
                                OnChange="@(async (arg) => { if (selectedDeviceIds.Count == 0) await LoadData();})"
                              Width="500px"
                              ShowClearButton="true">
            </TelerikMultiSelect>
        </div>
        <div>
            <label>@Localizer["OrdersPage_DeviceCategory"]</label>
            <TelerikComboBox Data="@deviceCategories"
                             TextField="DeviceCategory"
                             @bind-Value="@selectedDeviceCategory"
                             Placeholder="@Localizer["OrdersPage_SelectCategory"]"
                             ShowClearButton="true"
                             Filterable="true"
                             OnChange="@OnCategoryChanged">
            </TelerikComboBox>
        </div>
    </div>
}

<h3>@Localizer["OrdersPage_Orders"] (@OrdersForGrid.Count)</h3>
@if (isOrdersLoading)
{
    <div>@Localizer["OrdersPage_LoadingOrderList"]</div>
}
else
{
    <OrdersGrid @ref="ordersGrid"
                OrdersForGrid="@OrdersForGrid"
                workOrderStates="@workOrderStates"
                OnOrderChanged="@OnOrderChanged"
                OnStateChanged="@(async (GridStateEventArgs<WorkOrder> args) => { _viewSettings.GridState = args.GridState; await SaveStateAsync(); })"
                isLoading="@isOrdersLoading" />
}
@code {
    private string ViewSettingsKey = ViewSettingsService.SettingsKeys["OrdersPage"];
    private ViewSettings<WorkOrder> _viewSettings;
    private bool isOrdersLoading = false;
    private bool isDevicesLoading = false;
    private List<WorkOrder> OrdersForGrid = new List<WorkOrder>();
    private IEnumerable<Device> selectedDevices = new List<Device>();
    private List<int> selectedDeviceIds = new List<int>();
    private string? selectedState = "All";
    private string? selectedDeviceType = "All";
    private string? selectedDeviceCategory = "All";
    private List<Device> devices = new List<Device>();
    List<string?> deviceCategories = new List<string?>();
    List<string?> deviceTypes = new List<string?>();
    List<string>? workOrderStates = new List<string>();
    private List<Person> allPersons = new List<Person>();
    private List<string> personNames = new List<string>();
    private List<string> selectedPersons = new List<string>();
    private List<WODict> dicts = new List<WODict>();
    private Person currentUser = new Person();
    private OrdersGrid ordersGrid;
    private MultiSelectTagMode TagMode { get; set; } = MultiSelectTagMode.Single;
    private int? MaxAllowedTags { get; set; }
    private bool hasInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;

            Console.WriteLine("______Initialized ORDERS PAGE");
            _viewSettings = await ViewSettingsService.LoadSettingsAsync<WorkOrder>(ViewSettingsKey);
            RestoreCustomFilterState();

            await UserState.InitializationTask; // Ensure UserState is loaded
            if (!UserState.IsAuthenticated)
            {
                Navigation.NavigateTo("/login");
            }

            isDevicesLoading = true;
            StateHasChanged();
            dicts = await apiService.GetWODictionaries(UserState.PersonID, UserState.LangCode);
            allPersons = await apiService.GetAllPersons();
            personNames = allPersons.Select(p => p.Name).ToList();
            currentUser.PersonId = UserState.PersonID ?? -1;
            currentUser.Name = UserState.UserName ?? string.Empty;
            OrdersForGrid = await apiService.GetWorkOrdersAsync(lang: UserState.LangCode);
            workOrderStates = OrdersForGrid.Select(o => o.WOState ?? string.Empty).Distinct().ToList();
            devices = await apiService.GetAllDevicesCachedAsync();
            deviceCategories = devices.Select(d => d.DeviceCategory).Distinct().ToList();
            deviceCategories?.Insert(0, "All");
            deviceTypes = devices.Select(d => d.Type).Distinct().ToList();
            deviceTypes?.Insert(0, "All");
            isDevicesLoading = false;
            StateHasChanged();
            await LoadData();

            await InvokeAsync(StateHasChanged);
            // Apply the state after the data is loaded and the grids are rendered
            if (ordersGrid != null) await ordersGrid.ApplyStateAsync(_viewSettings.GridState);
        }
    }

    private async Task SaveStateAsync()
    {
        _viewSettings.SetCustomFilter("selectedDeviceIds", selectedDeviceIds);
        _viewSettings.SetCustomFilter("selectedDeviceCategory", selectedDeviceCategory);
        _viewSettings.SetCustomFilter("TagMode", TagMode);
        await ViewSettingsService.SaveSettingsAsync(ViewSettingsKey, _viewSettings);
    }

    private void RestoreCustomFilterState()
    {
        selectedDeviceIds = _viewSettings.GetCustomFilter("selectedDeviceIds", new List<int>());
        selectedDeviceCategory = _viewSettings.GetCustomFilter("selectedDeviceCategory", "All");
        TagMode = _viewSettings.GetCustomFilter("TagMode", MultiSelectTagMode.Single);

    }


    private async Task LoadData()
    {
        isOrdersLoading = true;
        StateHasChanged();
        if (devices == null || devices.Count == 0)
        {
            return; // No devices available, exit early
        }

        if (selectedDevices == null || selectedDevices.Count() == 0)
        {
            selectedDevices = new List<Device>();
        }

        if (selectedDeviceIds == null || selectedDeviceIds.Count == 0)
        {
            selectedDeviceIds = new List<int>();
        }
        Console.WriteLine($"Selected devices count: {selectedDevices.Count()}");
        var filteredDevices = GetFilteredDevices();
        OrdersForGrid = await GetFilteredOrders(filteredDevices);
        //OrdersForGrid = OrdersForGrid.OrderByDescending(o => o.WorkOrderID).ToList();
        isOrdersLoading = false;
        StateHasChanged();
    }



    private IEnumerable<Device> GetFilteredDevices()
    {
        return devices.Where(d =>
            (string.IsNullOrWhiteSpace(selectedDeviceCategory) || d.DeviceCategory == selectedDeviceCategory || selectedDeviceCategory == "All") &&
            (string.IsNullOrWhiteSpace(selectedDeviceType) || d.Type == selectedDeviceType || selectedDeviceType == "All") &&
            (selectedDeviceIds.Count == 0 || selectedDeviceIds.Contains(d.MachineID))
        );
    }

    private async Task<List<WorkOrder>> GetFilteredOrders(IEnumerable<Device> devices)
    {
        List<WorkOrder> orders = new List<WorkOrder>();
        if (selectedDeviceIds.Count == 0 &&
            selectedState == "All" &&
            selectedPersons.Count == 0 &&
            selectedDeviceCategory == "All" &&
            selectedDeviceType == "All"
        )
        {
            orders = await apiService.GetWorkOrdersCachedAsync();
        }
        else
        {
            orders = await apiService.GetWorkOrdersCachedAsync(devices);
        }

        var result = orders.Where(o =>
            (o.WOState == selectedState || selectedState == "All" || string.IsNullOrWhiteSpace(selectedState)) &&
            (selectedPersons.Count == 0 || selectedPersons.Contains(o.AssignedPerson))
        ).OrderByDescending(o => o.WorkOrderID).ToList(); ;
        return result;
    }

    private async Task OnOrderChanged(SchedulerAppointment? editedAppointment)
    {
        if (editedAppointment == null) return;

        var index = OrdersForGrid.FindIndex(x => x.WorkOrderID == editedAppointment.AppointmentId);
        OrdersForGrid.RemoveAt(index);
        OrdersForGrid.Insert(index, editedAppointment);
        ordersGrid.RefreshGrid();
        StateHasChanged();
    }

    #region Filter events
    //Select devices from MultiSelect
    private async Task OnMultiValueClosed()
    {
        selectedDevices = devices.Where(d => selectedDeviceIds.Contains(d.MachineID)).ToList();
        await LoadData();
        await SaveStateAsync();
    }

    async Task OnCategoryChanged()
    {
        if (string.IsNullOrWhiteSpace(selectedDeviceCategory))
            selectedDeviceCategory = "All";
        await LoadData();
        await SaveStateAsync();
    }

    async Task selectAllDevices()
    {
        selectedDeviceIds = devices.Select(d => d.MachineID).ToList();
        selectedDevices = devices.ToList();
        selectedDeviceCategory = "All";
        selectedDeviceType = "All";
        selectedState = "All";
        await LoadData();
        await SaveStateAsync();
    }
    #endregion

    private List<Tags> TagModes { get; set; } = new List<Tags>()
    {
        new Tags { Mode = MultiSelectTagMode.Single, Description = "Compact" },
        new Tags { Mode = MultiSelectTagMode.Multiple, Description = "Extended" }
    };

    private class Tags
    {
        public MultiSelectTagMode Mode { get; set; }
        public string Description { get; set; }
    }
}
