@page "/settings"
@using BlazorTool.Client.Services
@using BlazorTool.Client.Components
@inject ApiServiceClient apiService
@inject NavigationManager Navigation
@inject UserState UserState
@inject AppStateService AppState
@inject ILogger<Settings> Logger
@inject IStringLocalizer<Resources.UIStrings> Localizer

<BlazorTool.Client.Components.CheckSession ApiService="@apiService" UserState="@UserState" />

<TelerikDialog @bind-Visible="isConfirmDialogVisible">
    <DialogTitle>@Localizer["Settings_Confirmation"]</DialogTitle>
    <DialogContent>
        <p>@Localizer["Settings_ConfirmApiChange"]</p>
        <p><strong>@Localizer["Settings_OldAddress"]</strong> @oldApiAddress</p>
        <p><strong>@Localizer["Settings_NewAddress"]</strong> @ApiAddress</p>
        <p class="text-danger">@Localizer["Settings_AppRestart"]</p>
    </DialogContent>
    <DialogButtons>
        <TelerikButton OnClick="@ConfirmSave" ThemeColor="primary">@Localizer["Settings_Confirm"]</TelerikButton>
        <TelerikButton OnClick="@CancelSave">@Localizer["Settings_Cancel"]</TelerikButton>
    </DialogButtons>
</TelerikDialog>

<h3>@Localizer["Settings_Title"]</h3>
<div class="container">
    @if (isAdmin)
    {
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="apiUrl" class="form-label">@Localizer["Settings_ApiAddress"]</label>
                <div class="input-group">
                    <input type="text" id="apiUrl" class="form-control" @bind="ApiAddress" />
                    <button class="btn btn-outline-secondary" type="button" @onclick="TestApiAddress">@Localizer["Settings_TestApiAddress"]</button>
                </div>
            </div>
        </div>
    }

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="language" class="form-label">Language</label>
            <select id="language" class="form-select" @bind="@SelectedLanguage">
                <option value="pl-PL">Polski</option>
                <option value="en-US">English</option>
                {!-- Add more languages as needed --}
            </select>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="form-check">
                <TelerikCheckBox Id="color-switcher" @bind-Value="@UseOriginalColors" />
                <label class="form-check-label" for="color-switcher">@Localizer["Settings_UseOriginalColors"]</label>
            </div>
        </div>
    </div>


    <button class="btn btn-primary" @onclick="SaveSettingsAsync">@Localizer["Settings_SaveSettings"]</button>

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="mt-3 @StatusMessageClass">
            @StatusMessage
        </div>
    }
</div>

<div class="container mt-4">
    <UserProfileDisplay UserState="@UserState" DisplayNames="@UserProfileDisplayNames" />
</div>

@code{

    protected string? ApiAddress { get; set; }
    protected string? SelectedLanguage { get; set; } = "pl-Pl";
    private bool isAdmin = false;
    protected string? StatusMessage { get; set; }
    protected string? StatusMessageClass { get; set; } // e.g., "text-success" or "text-danger"
    string currentUser = "test User"; // Placeholder for current user, replace with actual user logic"
    private bool UseOriginalColors { get; set; }

    private bool isConfirmDialogVisible = false;
    private string oldApiAddress = "";
    private bool needRestart = false;

    private Dictionary<string, string> UserProfileDisplayNames = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        if (!UserState.IsAuthenticated)
        {
            Logger.LogWarning("User is not authenticated, redirecting to login page.");
            Navigation.NavigateTo("/login");
            return;
        }

        GetUserProfilenames();
        currentUser = UserState.UserName ?? "unknown user";
        isAdmin = UserState.UserName == "MES" || UserState.UserName?.ToLower() == "admin";
        Logger.LogInformation($"Current user: {currentUser}, Is Admin: {isAdmin}");
        await LoadSettingsAsync();
        UseOriginalColors = UserState.UseOriginalColors;
        await InvokeAsync(StateHasChanged);
    }

    private void GetUserProfilenames()
    {
        UserProfileDisplayNames = new Dictionary<string, string>
    {
        { nameof(UserState.UserName), Localizer["UserProfile_UserName"] },
        { nameof(UserState.LangCode), Localizer["UserProfile_LangCode"] },
        { nameof(UserState.PersonID), Localizer["UserProfile_PersonID"] },
        { nameof(UserState.IsAuthenticated), Localizer["UserProfile_IsAuthenticated"] },
        { nameof(UserState.RightMatrix), Localizer["UserProfile_RightMatrix"] },
        { nameof(UserState.UseOriginalColors), Localizer["UserProfile_UseOriginalColors"] },
        { nameof(UserState.CanHaveManyActiveTake), Localizer["CanHaveManyTakenOrders"]  },
        { "WO_Add", Localizer["Permission_WO_Add"] },
        { "WO_Edit", Localizer["Permission_WO_Edit"] },
        { "WO_Edit_Description", Localizer["Permission_WO_Edit_Description"] },
        { "WO_Del", Localizer["Permission_WO_Del"] },
        { "WO_Close", Localizer["Permission_WO_Close"] },
        { "AcT_Add", Localizer["Permission_AcT_Add"] },
        { "AcT_Del", Localizer["Permission_AcT_Del"] },
        { "AcT_Edit_Description", Localizer["Permission_AcT_Edit_Description"] },
        { "WO_SET_AssignedPerson", Localizer["Permission_WO_SET_AssignedPerson"] }
    };
    }
    protected async Task LoadSettingsAsync()
    {
        if (isAdmin)
        {
            ApiAddress = await LoadSettingAsync("apiAddress");
            oldApiAddress = AppState.Settings.ApiBaseUrl ?? ApiAddress ?? "";
            if (string.IsNullOrEmpty(AppState.Settings.ApiBaseUrl) && !string.IsNullOrEmpty(ApiAddress))
            {
                AppState.Settings.ApiBaseUrl = ApiAddress;
            }
        }
        SelectedLanguage = UserState.LangCode;
        UseOriginalColors = UserState.UseOriginalColors;
    }

    protected async Task<string?> LoadSettingAsync(string key)
    {
        return await apiService.LoadSettingAsync(key, currentUser);
    }

    protected async Task<bool> TestApiAddress()
    {
        StatusMessage = string.Empty;
        if (string.IsNullOrWhiteSpace(ApiAddress))
        {
            StatusMessage = Localizer["Settings_ApiAddressEmpty"];
            StatusMessageClass = "text-danger";
            return false;
        }

        try
        {
            var response = await apiService.CheckApiAddressAsync(ApiAddress);
            if (!response.Item1)
            {
                StatusMessage = response.Item2;
                StatusMessageClass = "text-danger";
                return false;
            }
            StatusMessage = $"{Localizer["Settings_ApiConnected"]} '{ApiAddress}'.";
            StatusMessageClass = "text-success";
            return true;
        }
        catch (Exception ex)
        {
            StatusMessage = $"{Localizer["Settings_ApiTestError"]} {ex.Message}";
            StatusMessageClass = "text-danger";
            return false;
        }
    }

    protected async Task SaveSettingsAsync()
    {
        StatusMessage = string.Empty;
        needRestart = isAdmin && !string.IsNullOrEmpty(ApiAddress) && ApiAddress != oldApiAddress;
        if (needRestart)
        {
            var testResult = await TestApiAddress();
            if (!testResult)
            {
                StatusMessage = Localizer["Settings_WrongApiAddress"];
                StatusMessageClass = "text-danger";
                needRestart = false;
                return;
            }

            if (!ApiAddress.EndsWith('/')) ApiAddress += "/";

            // If user is admin and the API address has changed, show confirmation dialog
            isConfirmDialogVisible = true;
            return;
        }

        // If no confirmation is needed, proceed with saving other settings
        await ProceedWithSave(needRestart);
    }

    private async Task ConfirmSave()
    {
        isConfirmDialogVisible = false;
        await ProceedWithSave(true);
    }

    private void CancelSave()
    {
        isConfirmDialogVisible = false;
        ApiAddress = oldApiAddress; // Revert the change in the input
        StatusMessage = Localizer["Settings_Canceled"];
        StatusMessageClass = "text-info";
    }

    private async Task ProceedWithSave(bool needRestart)
    { 
        bool needReload = false;
        try
        {
            var s1 = await SaveSettingAsync("selectedLanguage", SelectedLanguage, currentUser);
            var s2 = await SaveSettingAsync("useOriginalColors", UseOriginalColors.ToString(), currentUser);
            if (s1 && s2)
            {
                UserState.UseOriginalColors = UseOriginalColors;
                UserState.LangCode = SelectedLanguage;
                needReload = await UserState.SwitchLanguage(SelectedLanguage);
                StatusMessage = Localizer["Settings_SettingsSaved"];
                StatusMessageClass = "text-success";
            }
            else
            {
                StatusMessage = Localizer["Settings_SaveFailed"];
                StatusMessageClass = "text-danger";
            }

            if (needRestart)
            {
                await SaveSettingAsync("apiAddress", ApiAddress, currentUser);
                AppState.Settings.ApiBaseUrl = ApiAddress;
                StatusMessage += Localizer["Settings_RestartApplyApi"];
                // Clear client-side cache and force a full page reload
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
            else if (needReload)
            {
                // If language changed, reload the page to apply new language settings
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"{Localizer["Settings_AnErrorOccurred"]} {ex.Message}";
            StatusMessageClass = "text-danger";
        }
    }


    protected async Task<bool> SaveSettingAsync(string? key, string? value, string? user)
    {
        if (string.IsNullOrWhiteSpace(key) || string.IsNullOrWhiteSpace(value) || string.IsNullOrWhiteSpace(user))
        {
            return false;
        }

        var result = await apiService.SaveSettingAsync(key, value, user);
        return result;
    }
}
