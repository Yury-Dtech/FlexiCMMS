@page "/devices"

@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using Telerik.Blazor.Components
@using Telerik.Blazor
@inject ApiServiceClient ApiService
@inject IStringLocalizer<Resources.UIStrings> Localizer
@inject ViewSettingsService ViewSettingsService

<h3>@Localizer["DevicesPage_Title"]</h3>

@if (_devices == null)
{
    <TelerikLoaderContainer Visible="true" Text="@Localizer["OrdersPage_LoadingDevicesList"]"></TelerikLoaderContainer>
}
else
{
    <TelerikGrid Data="@_devices"
                 Pageable="true"
                 PageSize="30"
                 Sortable="true"
                 FilterMode="@GridFilterMode.FilterMenu"
                 Resizable="true"
                 Height="calc(100vh - 200px)"
                 OnRowClick="@OnRowClickHandler"
                 OnStateChanged="@(async (GridStateEventArgs<Device> args) => { _viewSettings.GridState = args.GridState; await SaveStateAsync(); })"
                 @ref=@devicesGrid>
        <GridColumns>
            <GridColumn Field="@nameof(Device.MachineID)" Title="@Localizer["WorkOrder_ID"]" Width="100px" />
            <GridColumn Field="@nameof(Device.AssetNo)" Title="@Localizer["AssetNo"]" />
            <GridColumn Field="@nameof(Device.DeviceCategory)" Title="@Localizer["DeviceCategory"]" />
            <GridColumn Field="@nameof(Device.Type)" Title="@Localizer["Device_Type"]" />
            <GridColumn Field="@nameof(Device.SerialNo)" Title="@Localizer["Device_SerialNo"]" />
            <GridColumn Field="@nameof(Device.LocationName)" Title="@Localizer["Device_LocationName"]" />
            <GridColumn Field="@nameof(Device.Owner)" Title="@Localizer["Device_Owner"]" />
        </GridColumns>
    </TelerikGrid>
}

<TelerikWindow @bind-Visible="@_showDeviceWindow"
               Modal="true"
               MaxHeight="95vh"
               Centered="true"
               Draggable="true"
               Resizable="true"
               ThemeColor="@ThemeConstants.Window.ThemeColor.Dark"
               CloseOnOverlayClick="true">
    <WindowTitle>
        @Localizer["DeviceDetails_Title"]
    </WindowTitle>
    <WindowContent>
        @if (_selectedDeviceId.HasValue)
        {
            <BlazorTool.Client.Components.DeviceDisplay DeviceID="@_selectedDeviceId.Value" />
        }
        else
        {
            <p>@Localizer["DeviceDetails_NoDeviceSelected"]</p>
        }
    </WindowContent>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
</TelerikWindow>

@code {
    private List<Device>? _devices;
    private int? _selectedDeviceId;
    private bool _showDeviceWindow = false;
    private string ViewSettingsKey = ViewSettingsService.SettingsKeys["DevicesPage"];
    private ViewSettings<Device> _viewSettings;
    private TelerikGrid<Device> devicesGrid;
    private bool hasInitialized = false;

    protected override async Task OnInitializedAsync()
    {
            _devices = await ApiService.GetAllDevicesCachedAsync();        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;
            _viewSettings = await ViewSettingsService.LoadSettingsAsync<Device>(ViewSettingsKey);
            if (devicesGrid != null)
            {
                await devicesGrid.SetStateAsync(_viewSettings.GridState);
            }
        }
    }

    private async Task SaveStateAsync()
    {
        await ViewSettingsService.SaveSettingsAsync(ViewSettingsKey, _viewSettings);
    }

    private void OnRowClickHandler(GridRowClickEventArgs args)
    {
        var clickedDevice = args.Item as Device;
        if (clickedDevice != null)
        {
            _selectedDeviceId = clickedDevice.MachineID;
            _showDeviceWindow = true;
        }
    }
}
