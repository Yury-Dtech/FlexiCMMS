@page "/activities"

@using System.Linq
@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using BlazorTool.Client.Components
@using System.Text
@using System.Diagnostics
@using Telerik.Blazor.Components
@using Telerik.Blazor.Components.Scheduler
@using Telerik.DataSource.Extensions
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ApiServiceClient apiService
@inject NavigationManager Navigation
@inject UserState UserState
@inject AppStateService AppState
@inject ILogger<ActivitiesPage> Logger
@inject IStringLocalizer<Resources.UIStrings> Localizer
@inject ViewSettingsService ViewSettingsService

@cellStyles
<CheckSession apiService="@apiService" UserState="@UserState" />

<div class="filter-controls-row">
    <div style="flex-basis: 66%; flex-shrink:1; flex-grow:0; border-right: outset; display: flex; align-items: top; gap: 1rem;">
        @if (UserState.HasPermission(PermissionType.WO_Edit))
        {
            <div style="max-width: 400px;">
                <label>@Localizer["Scheduler_AssignedPersons"] </label>
                <TelerikComboBox Data="@allPersons"
                                    @bind-Value="@selectedPersonID"
                                    ValueField="@nameof(Person.PersonId)"
                                    TextField="@nameof(Person.Name)"
                                    Placeholder="@Localizer["Scheduler_SelectAssignedPersons"]"
                                    Filterable="true"
                                    FilterOperator="@Telerik.Blazor.StringFilterOperator.Contains"
                                    OnChange="@OnPersonSelectChanged"
                                    ShowClearButton="true"
                                    Size="sm">

                </TelerikComboBox>
            </div>
            <div>
                <label>@Localizer["Scheduler_Department"] </label>
                <TelerikMultiSelect
                                Data="@Departments" TextField="Department"
                                 Placeholder="@Localizer["Scheduler_SelectDepartment"]"
                                 @bind-Value="@selectedDepartments"
                                 AutoClose="false"
                                 OnClose="@OnMultiDepartmentsClosed"
                                 OnChange="@(async (arg) => { if (selectedDepartments.Count == 0) await LoadData(); })"
                                 Filterable="true"
                                 FilterOperator="@Telerik.Blazor.StringFilterOperator.Contains"
                                 ShowClearButton="true"
                                 Size="sm">
                </TelerikMultiSelect>
            </div>
        }
        <div>
            <label>@Localizer["Scheduler_Device"] </label>
            <TelerikComboBox Data="@WO_AssetNo"
                             Placeholder="@Localizer["Scheduler_SelectAsset"]"
                             Filterable="true"
                             FilterOperator="@Telerik.Blazor.StringFilterOperator.Contains"
                             AllowCustom="true"
                             Value="@selectedAssetNo"
                             ValueChanged="@((string assetNo) => OnAssetNoChanged(assetNo))"
                             Size="sm"
                             class=@(WOEditFormShown ? "" : "popup-target")>
            </TelerikComboBox>
        </div>
        <div class="ClearFilters-btn">
            <button class="ClearFilters-btn" @onclick="OnClearFilters" title="@Localizer["ClearFilters"]">
                @Localizer["ClearFilters"]
            </button>
        </div>

    </div>
</div>
<div class="scheduler-page-container">
    <div class="scheduler-container">
        <div style="display:flex; flex-direction: row; gap:10px">
            <div><p>@Localizer["Scheduler_ScheduledOrders"] @Appointments.Count()</p></div>
            <div><TelerikButton OnClick="@HardLoadData" Size="Small" ThemeColor="@ThemeConstants.Button.ThemeColor.Tertiary">@IconHtmlHelper.Refresh(20) @Localizer["Scheduler_ReloadAllData"]</TelerikButton></div>
        </div>

        <TelerikScheduler TItem="ActivityAppointment"
                          Id="Scheduler1"
                          Data="@Appointments"
                          @ref="SchedulerRef"
                          @bind-Date="SchedulerDate"
                          View="@CurrentView"
                          ViewChanged="@OnViewChanged"
                          AllowCreate="true"
                          AllowUpdate="true"
                          AllowDelete="true"
                          OnCreate="@OnCreateAppointment"
                          OnUpdate="@OnUpdateAppointment"
                          OnDelete="@OnDeleteAppointment"
                          OnEdit="@EditHandler"
                          OnCellRender="@OnSchedulerCellRender"
                          ConfirmDelete="true"
                          IdField="@nameof(ActivityAppointment.WorkOrderID)"
                          StartField="@nameof(ActivityAppointment.Start)"
                          EndField="@nameof(ActivityAppointment.End)"
                          TitleField="@nameof(ActivityAppointment.Title)"
                          DescriptionField="@nameof(ActivityAppointment.Description)"
                          Height="100%">

            <SchedulerResources>
                <SchedulerResource Field="WOState" Title="WOState" Data="@statuses" />
            </SchedulerResources>
            <SchedulerViews>
                <SchedulerDayView StartTime="@DayStart" EndTime="@DayEnd">
                    <ItemTemplate>
                        <div @oncontextmenu:preventDefault @oncontextmenu="@((MouseEventArgs e) => ShowContextMenuFromAppointment(e, context as ActivityAppointment))">
                            <ActivitySchedulerItem_ Item="@(context as ActivityAppointment)" View="@SchedulerView.Day" />
                        </div>
                    </ItemTemplate>
                    <SlotTemplate>
                        @{
                            SchedulerSlotTemplateContext slot = context as SchedulerSlotTemplateContext;
                            <div class="context-menu-area" @oncontextmenu:preventDefault @oncontextmenu="@((MouseEventArgs e) => ShowContextMenuFromEmptySlot(e, slot))">
                            </div>
                        }
                    </SlotTemplate>
                </SchedulerDayView>
                <SchedulerWeekView >
                    <ItemTemplate>
                        <div style="height:100%;" @oncontextmenu:preventDefault @oncontextmenu="@((MouseEventArgs e) => ShowContextMenuFromAppointment(e, context as ActivityAppointment))">
                            <ActivitySchedulerItem Item="@(context as ActivityAppointment)" View="@SchedulerView.Week" />
                        </div>  
                    </ItemTemplate>
                    <SlotTemplate>
                        @{
                            SchedulerSlotTemplateContext slot = context as SchedulerSlotTemplateContext;

                             <div class="context-menu-area" @oncontextmenu:preventDefault @oncontextmenu="@((MouseEventArgs e) => ShowContextMenuFromEmptySlot(e, slot))">
                             </div>
                            //         @foreach (var WO in _allOrders.Where(a => isWOinTimeSlot(a, slot.Start, slot.End)))
                            //     {
                            //             <div class="wo-background state-@WO.StateColor"></div>
                            //     }
                        }
                    </SlotTemplate>
                </SchedulerWeekView>
            </SchedulerViews>
        </TelerikScheduler>

        <TelerikLoaderContainer Visible="@isLoading" Text="@Localizer["Scheduler_LoadingAppointments"]" Size="@Telerik.Blazor.ThemeConstants.Loader.Size.Large">
        </TelerikLoaderContainer>

    </div>
    <TelerikContextMenu TItem="ContextMenuItem" @ref="@ContextMenuRef" Data="@MenuItems" OnClick="@OnMenuItemClick" Class="custom-context-menu" />
</div>

<TelerikWindow Modal="false" MinWidth="1200px" MaxHeight="95vh" Visible="@WOEditFormShown" ThemeColor="@ThemeConstants.Window.ThemeColor.Dark">
    <WindowTitle>@Localizer["WorkOrder_OrderNo"]@CurrentAppointment?.WorkOrderID</WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" OnClick="@CancelEditing" />
    </WindowActions>
    <WindowContent>
        <AppointmentEditor Appointment="@CurrentAppointment?.ToSchedulerAppointment()"
                           isEditable=@(UserState.HasPermission(PermissionType.WO_Edit) || (CurrentAppointment?.AppointmentId ==0 && UserState.HasPermission(PermissionType.WO_Add)))
                           ListPersons="@PersonsNames.Where(c=>c != "All").ToList()"
                           currentUser="@currentUser"
                           OnComponentClosing="@RefreshData"
                           isScheduler="true" />
    </WindowContent>
</TelerikWindow>

<TelerikWindow Modal="true" MinWidth="800px" MaxHeight="95vh" Visible="@showNewActivityForm" ThemeColor="@ThemeConstants.Window.ThemeColor.Dark">
    <WindowTitle>@Localizer["Add_New_Activity"]</WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" OnClick="@CancelNewActivityForm" />
    </WindowActions>
    <WindowContent>
        <NewActivityFormComponent InitialStartDate="@newActivityInitialStartDate"
                                  InitialEndDate="@newActivityInitialEndDate"
                                  OnActivityAdded="@OnNewActivityAdded"
                                  WorkOrderID = "@CurrentAppointment?.WorkOrderID"/>
    </WindowContent>
</TelerikWindow>

    <TelerikWindow @bind-Visible="ShowAddActivityForOrderForm" Modal="true" Width="500px">
        <WindowTitle>
                <strong>@Localizer["WorkOrder_AddActivity"]</strong>
        </WindowTitle>
            <WindowActions>
                <WindowAction Name="Close" />
            </WindowActions>
        <WindowContent>
            <AddActivityForm WorkOrderID="@(CurrentAppointment?.WorkOrderID ?? 0)" OnActivityAdded="OnNewActivityAdded" RecommendedStart="@NewActivityTime"/>
        </WindowContent>
    </TelerikWindow>

    <TelerikWindow @bind-Visible="ShowActivityCard" Modal="true" Width="500px" CloseOnOverlayClick="true">
        <WindowTitle>
                <strong>@Localizer["WorkOrder_Action"]</strong>
        </WindowTitle>
            <WindowActions>
                <WindowAction Name="Close" />
            </WindowActions>
        <WindowContent>
            <ActivityCard Activity="@CurrentAppointment" LangCode="@UserState.LangCode" />
        </WindowContent>
    </TelerikWindow>

<TelerikPopup @ref="@PopupRef"
              AnchorSelector=".popup-target"
              AnchorHorizontalAlign="@PopupAnchorHorizontalAlign.Center"
              AnchorVerticalAlign="@PopupAnchorVerticalAlign.Center"
              AnimationType="@AnimationType.SlideDown"
              AnimationDuration="200"
              Width="300px"
              Height="300px">
    <div Class="warning-popup">
        <p>@popupMessage</p>
        <TelerikButton OnClick="@(() => PopupRef?.Hide())"
                       Icon="@SvgIcon.XCircle">Close</TelerikButton>
    </div>

</TelerikPopup>

@code {
    #region fields and properties
    private string ActivitiesSettingsKey = ViewSettingsService.SettingsKeys["ActivitiesPage"];
    private List<ActivityAppointment> Appointments { get; set; } = new();
    private List<ActivityAppointment> _allAppointments { get; set; } = new();
    private TelerikScheduler<ActivityAppointment>? SchedulerRef { get; set; }
    private TelerikPopup? PopupRef { get; set; }
    private DateTime SchedulerDate { get; set; } = DateTime.Today;
    private SchedulerView CurrentView { get; set; } = SchedulerView.Month;
    private DateTime DayStart => DateTime.Today.AddHours(7);
    private DateTime DayEnd => DateTime.Today.AddHours(20);
    private DateTime? NewActivityTime { get; set; } = null;
    private MarkupString cellStyles = new MarkupString(); //for rows colors
    private List<WorkOrder> TakenOrders { get; set; } = new();
    private List<WorkOrder> _allOrders = new();
    private bool isLoading { get; set; } = true;
    private bool WOEditFormShown { get; set; } = false;
    private bool isOrderCardOpen = false;
    private bool ShowAddActivityForOrderForm { get; set; } = false;
    private bool ShowActivityCard { get; set; } = false;
    private ActivityAppointment? CurrentAppointment { get; set; } = new ActivityAppointment();
    private List<Models.Activity> activities = new();
    private List<Person> allPersons = new();
    private List<Person> PersonResources { get; set; } = new();
    private int selectedPersonID = 0;
    private Person selectedPerson = new Person();
    private List<string> PersonsNames = new();
    private List<string> Departments = new();
    private List<string> WOCategories = new();
    private List<string> WOStates = new();
    private List<string> selectedDepartments = new List<string>();
    private List<string> DeviceCategories = new();//for Orders grid filter
    private string selectedCategory = "All";
    private List<string> WO_AssetNo = new();
    private string selectedAssetNo = "All";
    private Person currentUser = new Person();
    private string popupMessage = string.Empty;
    private int? columnWidth = 50; //for TimelineView alt=80
    private int? slotDuration = 180; //in minutes for TimelineView
    private int? slotDivisions = 1; //for TimelineView
    private int? numberOfDays = 5; //for TimelineView alt=3
    private string selectedTimelineOption = "5";
    private bool showCustomTimelineInputs = false;
    private List<Resource> statuses = new List<Resource>();
    private ViewSettings<WorkOrder> _viewSettings = new ViewSettings<WorkOrder>();
    private System.Threading.Timer _saveStateTimer;
    private const int SaveStateDelay = 500; // ms

    private bool showNewActivityForm = false;
    private DateTime newActivityInitialStartDate;
    private DateTime newActivityInitialEndDate;
    #endregion 
    private List<Resource> GetStatuses(List<WorkOrder> orders)
    {
        List<Resource> resources = new List<Resource>();
        if (UserState.UseOriginalColors)
        {
            var st = orders.Select(a => a.WOState).Distinct().ToList();
            foreach (var s in st)
            {
                var status = new Resource
                {
                    Text = s,
                    Value = s,
                    Color = orders.FirstOrDefault(a => a.WOState == s)?.StateColor ?? "LightGray"
                };
                resources.Add(status);
            }
        }
        else
        {

            resources = new List<Resource>
            {
                new Resource { Text = @Localizer["Scheduler_NotStarted"], Value = "Nie rozpoczęte", Color = "LightCoral" },
                new Resource { Text = @Localizer["Scheduler_InProgress"], Value = "W trakcie realizacji", Color = "LightYellow" },
                new Resource { Text = @Localizer["Scheduler_InProgress"], Value = "Zawieszone", Color = "lightsteelblue" },
                new Resource { Text = @Localizer["Scheduler_Completed"], Value = "Zakończony", Color = "LightGreen" },
                new Resource { Text = @Localizer["Scheduler_Completed"], Value = "Zakończone", Color = "LightGreen" },
                new Resource { Text = @Localizer["Scheduler_Completed"], Value = "default", Color = "LightGray" },
            };

            foreach (var order in orders)
            {
                var color = GeneratePastelColor(order.WorkOrderID);
                resources.Add(new Resource
                {
                    Text = $"WO-{order.WorkOrderID}",
                    Value = order.WorkOrderID.ToString(),
                    Color = color
                });
            }
        }
        return resources;
    }


    private string GeneratePastelColor(int id)
    {
        int hue = 100*id % 360;
        int saturation = 60; // softened tone
        int lightness = 80;
        return $"hsl({hue}, {saturation}%, {lightness}%)";
    }


    protected override async Task OnInitializedAsync()
    {
        _viewSettings = await ViewSettingsService.LoadSettingsAsync<WorkOrder>(ActivitiesSettingsKey);
        if (_viewSettings != null)
        {
            RestoreCustomFilterState();
        }

        var isWASM = JSRuntime is IJSInProcessRuntime;
        Console.WriteLine($"--- Initialized Activities PAGE. WASM = {isWASM}");
        Console.WriteLine($"--- OnInitializedAsync completed.");
        await UserState.InitializationTask; // Ensure UserState is loaded

        if (int.TryParse(selectedTimelineOption, out int days))
        {
            numberOfDays = days;
        }

        InitializeSaveStateTimer();

        await HardLoadData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task HardLoadData()
    {
        Console.WriteLine("--- HardLoadData started.");
        isLoading = true;
        if (!UserState.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
        }
        StateHasChanged();
        allPersons = await apiService.GetAllPersons();
        Console.WriteLine($"--- HardLoadData: allPersons loaded. Count: {allPersons.Count}");
        PersonsNames = allPersons.Select(c => c.Name).ToList();
        PersonsNames.Insert(0, Person.NotAssigned.Name);
        currentUser.PersonId = UserState.PersonID ?? -1;
        currentUser.Name = UserState.UserName ?? string.Empty;
        selectedPerson = allPersons.FirstOrDefault(p => p.PersonId == selectedPersonID) ?? Person.NotAssigned;
        _allOrders = (await apiService.GetWorkOrdersWithPerson(selectedPerson.PersonId)).Where(w=>w.CloseDate == null).ToList(); //Only opened
        activities = await apiService.GetActivitiesByWO(_allOrders);
        _allAppointments = ConvertAppointmentsFromActivities(activities);
        _allAppointments.AddRange(ConvertAppointmentsFromWorkOrders(_allOrders));
        cellStyles = RenderStatesStyle(_allOrders);
        await apiService.GetWODictionaries(UserState.PersonID, UserState.LangCode);
        WOCategories = apiService.GetWOCategories().Select(c => c.Name).ToList();
        WOStates = apiService.GetWOStates().Select(c => c.Name).ToList();
        await LoadData();

        Console.WriteLine($"--- HardLoadData completed. Appointments count: {Appointments.Count}");
    }

    private async Task LoadData()
    {
        Console.WriteLine("--- LoadData started.");
        isLoading = true;
        StateHasChanged();
        selectedPerson = allPersons.FirstOrDefault(p => p.PersonId == selectedPersonID) ?? Person.NotAssigned;
        _allOrders = (await apiService.GetWorkOrdersWithPersonCachedAsync(selectedPerson.PersonId)).Where(w=>w.CloseDate == null).ToList(); //Only opened
        WO_AssetNo = new List<string> { "All" };
        WO_AssetNo.AddRange(_allOrders.Where(d => !string.IsNullOrWhiteSpace(d.AssetNo)).Select(x => x.AssetNo).Distinct().ToList());
        activities = await apiService.GetCachedActivitiesByWO(_allOrders);
        _allAppointments = ConvertAppointmentsFromActivities(activities);
        _allAppointments.AddRange(ConvertAppointmentsFromWorkOrders(_allOrders));
        statuses = GetStatuses(_allOrders);
        Console.WriteLine($"--- LoadData: _allAppointments loaded. Count: {_allAppointments.Count}");
        Departments = apiService.GetWODepartments().Select(c => c.Name).Distinct().ToList();
        DeviceCategories = apiService.GetWOCategories().Select(c => c.Name).Distinct().ToList();
        DeviceCategories.Insert(0, "All");
        DisplayAppointments();
        isLoading = false;
        StateHasChanged();
        Console.WriteLine($"--- LoadData completed. Appointments count: {Appointments.Count}");
    }

    /// <summary>
    /// Displays the appointments in the scheduler, filtering by selected assigned persons and department.
    /// </summary>
    private void DisplayAppointments()
    {
        Appointments = FilterAppointments();

        // PersonResources should always contain all possible persons for grouping, including "Not assigned".
        // Filtering by selectedAssignedPersons is handled in FilterAppointments().
        if (selectedPersonID == 0) //show all persons
        {
            PersonResources = new List<Person>(allPersons);
        }
        else
        {
            PersonResources = allPersons.Where(p => p.PersonId == selectedPersonID).ToList();
        }

        _saveStateTimer?.Change(SaveStateDelay, Timeout.Infinite);
    }

    private List<ActivityAppointment> ConvertAppointmentsFromActivities(IEnumerable<Models.Activity> activities)
    {
        var appointments = activities.Select(a => new ActivityAppointment(a)).ToList();
        return appointments;
    }

    private List<ActivityAppointment> ConvertAppointmentsFromWorkOrders(IEnumerable<WorkOrder> workOrders)
    {
        var appointments = workOrders.Select(a => new ActivityAppointment(a)).ToList();
        return appointments;
    }

    #region filters

    private void OnMultiDepartmentsClosed()
    {
        DisplayAppointments();
        SaveFilterStateToCacheAsync();
    }

    private void OnAssetNoChanged(string assetNo)
    {
        selectedAssetNo = assetNo ?? "All";
        DisplayAppointments();
        SaveFilterStateToCacheAsync();
    }

    private void OnPersonSelectChanged(object args)
    {
        selectedPerson = allPersons.FirstOrDefault(p => p.PersonId == selectedPersonID) ?? Person.NotAssigned;
        DisplayAppointments();
        SaveFilterStateToCacheAsync();
    }

    private List<ActivityAppointment> FilterAppointments()
    {
        var filteredAppointments = new List<ActivityAppointment>(_allAppointments);
        if (selectedDepartments.Any())
        {
            // Filter appointments based on the selected department
            // filteredAppointments = filteredAppointments.Where(a => selectedDepartments.Contains(a.DepName)).ToList();
            //TODO: filter by departments of the work orders
        }
        if (!string.IsNullOrEmpty(selectedAssetNo) && selectedAssetNo != "All")
        {
            // Filter appointments based on the selected asset number
            // filteredAppointments = filteredAppointments.Where(a => a.AssetNo == selectedAssetNo).ToList();
            //TODO : filter by asset number of the work orders
        }
        if (selectedPersonID > 0)
        {
            // Filter appointments based on the selected assigned persons
            filteredAppointments = filteredAppointments.Where(a => (!a.IsWorkOrder && a.ActPersons.Contains(selectedPersonID.ToString())) ||
                                                                   (a.IsWorkOrder )).ToList();
            // || (isNotAssignedSelected && string.IsNullOrEmpty(a.AssignedPerson))).ToList();
        }

        return filteredAppointments;
    }

    private void SaveFilterStateToCacheAsync()
    {
        _viewSettings.SetCustomFilter("selectedPersonID", selectedPersonID);
        _viewSettings.SetCustomFilter("selectedDeviceCategory", selectedAssetNo);
        _viewSettings.SetCustomFilter("selectedDepartments", selectedDepartments);
        _viewSettings.SetCustomFilter("CurrentView", CurrentView);
        _viewSettings.SetCustomFilter("CustomDays", numberOfDays);
        _saveStateTimer?.Change(SaveStateDelay, Timeout.Infinite);       
    }

    private void RestoreCustomFilterState()
    {
        selectedPersonID = _viewSettings.GetCustomFilter("selectedPersonID", UserState.PersonID ?? 0);
        selectedAssetNo = _viewSettings.GetCustomFilter("selectedAssetNo", "All");
        selectedDepartments = _viewSettings.GetCustomFilter("selectedDepartments", new List<string>());
        CurrentView = _viewSettings.GetCustomFilter("CurrentView", SchedulerView.Week);
        numberOfDays = _viewSettings.GetCustomFilter("CustomDays", 7);

    }
    #endregion

    #region Scheduler
    // ==== Scheduler CUD handlers ====
    private async Task OnCreateAppointment(SchedulerCreateEventArgs args)
    {

        // if (args.Item is ActivityAppointment newAppt && SchedulerRef != null)
        // {
        //     var result = await ApptService.UpdateAppointment(newAppt);
        //     if (result.IsValid)
        //     {
        //         _allAppointments.Add(newAppt);
        //         Appointments.Add(newAppt);
        //         Console.WriteLine($"--- OnCreateAppointment: New appointment created. AssignedPerson: {newAppt.AssignedPerson}");
        //     }
        //     else
        //     {
        //         Console.WriteLine($"Failed to create appointment: {string.Join(", ", result.Errors)}");
        //     }
        //     SchedulerRef?.Rebind();
        // }
    }

    private async Task OnUpdateAppointment(SchedulerUpdateEventArgs args)
    {
        // if (args.Item is ActivityAppointment updAppt)
        // {
        //     var result = await ApptService.UpdateAppointment(updAppt);
        //     if (result.IsValid && result.Data != null)
        //     {
        //         Find and update the item in the local collections
        //         var index = Appointments.FindIndex(a => a.AppointmentId == result.Data.WorkOrderID);
        //         if (index >= 0) Appointments[index] = new ActivityAppointment(result.Data);

        //         var allIndex = _allAppointments.FindIndex(a => a.AppointmentId == result.Data.WorkOrderID);
        //         if (allIndex >= 0) _allAppointments[allIndex] = new ActivityAppointment(result.Data);
        //         Console.WriteLine($"--- OnUpdateAppointment: Appointment updated. AssignedPerson: {updAppt.AssignedPerson}");
        //     }
        //     else
        //     {
        //         Console.WriteLine($"Failed to update appointment: {string.Join(", ", result.Errors)}");
        //         Optional: revert changes in the UI or show a notification
        //     }
        //     SchedulerRef?.Rebind();
        // }
    }

    private async Task OnDeleteAppointment(SchedulerDeleteEventArgs args)
    {

        // if (args.Item is ActivityAppointment delAppt)
        // {
        //     var result = await ApptService.RemoveAppointment(delAppt);
        //     if (!result.IsValid)
        //     {
        //         string errors = string.Join(Environment.NewLine, result.Errors);
        //         popupMessage = errors ?? Localizer["Scheduler_FailedToCloseAppointment"];
        //         PopupRef?.Show();
        //         Console.WriteLine($"Failed to delete appointment: {string.Join(", ", result.Errors)}");
        //         return; // Exit if deletion failed
        //     }
        //     //UntakenOrders.Add(result.Data);
        //     _allAppointments.RemoveAll(a => a.AppointmentId == delAppt.AppointmentId);
        //     await LoadData();
        //     SchedulerRef?.Rebind();

        // }
    }
    private void OnViewChanged(SchedulerView view)
    {
        CurrentView = view;
        SaveFilterStateToCacheAsync();
    }
    private void OnDateClick(int day)
    {
        // var currentDate = DateTime.Now;
        // var navigateDate = new DateTime(currentDate.Year, currentDate.Month, day);

        // CurrView = SchedulerView.Day;
        // SelectedDate = navigateDate;
    }

    private void OnClearFilters()
    {
        selectedDepartments = new List<string> ();
        selectedAssetNo = "All";
        selectedPersonID = new();
        DisplayAppointments();
    }

    //when order window closed
    //On create, Update
    async Task RefreshData(ActivityAppointment? editedAppointment)
    {
        if (editedAppointment == null)//was removed or cancelled NEW
        {
            WOEditFormShown = false;
            isOrderCardOpen = false;
            return;
        }
        else
        {
            var index = _allAppointments.FindIndex(a => a.AppointmentId == editedAppointment.AppointmentId);
            if (index != -1)
            {
                _allAppointments[index] = editedAppointment;
            }
            else
                _allAppointments.Add(editedAppointment);
        }
        WOEditFormShown = false;
        isOrderCardOpen = false;
        await HardLoadData();
        SchedulerRef?.Rebind();
    }


    void EditHandler(SchedulerEditEventArgs args)
    {
        args.IsCancelled = true;//prevent built-in edit form from showing up
        ActivityAppointment item = (args.Item as ActivityAppointment) ?? new ActivityAppointment();
        if (!args.IsNew) // an edit operation, otherwise - an insert operation
        {
            //copying is implemented in the appointment model and it is needed because
            //this is a reference to the data collection so modifying it directly
            //will immediately modify the data and no cancelling will be possible
            CurrentAppointment = item;//.ShallowCopy();
        }
        else
        {
            bool isStartEqualsEnd = args.Start == args.End;
            CurrentAppointment = item ?? new ActivityAppointment();
            CurrentAppointment.Start = isStartEqualsEnd ? args.Start.AddHours(8) : args.Start;
            CurrentAppointment.End = isStartEqualsEnd ? args.End.AddHours(16) : args.End;
        }
        if (item?.IsWorkOrder ?? false || item?.WorkOrderID == 0)
            WOEditFormShown = true;
        else
            ShowActivityCard = true;
    }

    void CancelEditing()
    {
        WOEditFormShown = false;
        isOrderCardOpen = false;

    }

    private void OnSchedulerCellRender(SchedulerCellRenderEventArgs args)
    {
        if (CurrentView != SchedulerView.Day)
        {
            args.Class = "month-view-slot";
            if (args.Start.Date == DateTime.Today)
            {
                args.Class += " current-day";
            }
            // else if (args.Start.DayOfWeek == DayOfWeek.Saturday || args.Start.DayOfWeek == DayOfWeek.Sunday)
            // {
            //     args.Class += " weekend-day";
            // }
        }
    }
    #endregion

    private MarkupString RenderStatesStyle(List<WorkOrder> orders)
    {
        var uniqueColors = orders
           .Select(o => o.StateColor)
           .Where(c => !string.IsNullOrWhiteSpace(c))
           .Distinct();

        var sb = new StringBuilder();
        sb.AppendLine("<style>");
        foreach (var color in uniqueColors)
        {
            var safeName = color.TrimStart('#');
            if (!UserState.UseOriginalColors)
                switch (safeName.ToLowerInvariant())
                {
                    case "lime":
                    case "1bf151":
                        safeName = "LightGreen";
                        break;
                    case "red":
                        safeName = "LightCoral";
                        break;
                    case "yellow":
                    case "ffff80":
                        safeName = "LightYellow";
                        break;
                    case "silver":
                        safeName = "LightSteelBlue";
                        break;
                    default:
                        break;
                }
            else
                safeName = color;
            sb.AppendLine($".state-{color.TrimStart('#')} {{");
            sb.AppendLine($"    background-color: {safeName};");
            sb.AppendLine("}");
        }
        sb.AppendLine("</style>");

        return new MarkupString(sb.ToString());
    }
    public class Resource
    {
        // these are the default field names
        public string Text { get; set; }
        public string Value { get; set; }
        public string Color { get; set; } // must be a valid CSS string
    }

    private void InitializeSaveStateTimer()
    {
        _saveStateTimer = new(async _ =>
        {
            await ViewSettingsService.SaveSettingsAsync(ActivitiesSettingsKey, _viewSettings);
            await SaveAllSettingsToServer();
        }, null, Timeout.Infinite, Timeout.Infinite);
    }

    public async ValueTask DisposeAsync()
    {
        if (_saveStateTimer is not null)
        {
            await _saveStateTimer.DisposeAsync();
        }
    }

    private async Task SaveAllSettingsToServer()
    {
        if (UserState == null || string.IsNullOrEmpty(UserState.UserName)) return;
        foreach (var key in ViewSettingsService.SettingsKeys.Values)
        {
            var viewSettings = await ViewSettingsService.LoadSettingsAsync<WorkOrder>(key);
            await apiService.SaveViewSettingsAsync(UserState.UserName, key, viewSettings);
        }
    }
    #region Context Menu
    private TelerikContextMenu<ContextMenuItem>? ContextMenuRef { get; set; }
    private List<ContextMenuItem> MenuItems { get; set; } = new();
    private SchedulerSlotTemplateContext? _clickedSlotContext;

    private async Task ShowContextMenuFromEmptySlot(MouseEventArgs e, SchedulerSlotTemplateContext slotContext)
    {
        _clickedSlotContext = slotContext;
        CurrentAppointment = null;
        MenuItems = new List<ContextMenuItem>();
        if (UserState.HasPermission(PermissionType.WO_Add))
        {
            MenuItems.Add(new ContextMenuItem { Text = @Localizer["Scheduler_AddNew"], CommandName = "AddWorkOrder", Icon = SvgIcon.Plus });
        }

        if(MenuItems.Count == 0)    MenuItems.Add(new ContextMenuItem { Text = @Localizer["NoActionsAvailable"], CommandName = "NoActionsAvailable", Icon = SvgIcon.CancelOutline });
        MenuItems.Add(new ContextMenuItem { Text = @Localizer["WorkOrder_AddActivity"], CommandName = "AddActivity", Icon = SvgIcon.Plus });
        await ContextMenuRef?.ShowAsync(e.ClientX, e.ClientY)!;
    }

    private async Task ShowContextMenuFromAppointment(MouseEventArgs e, ActivityAppointment appointment)
    {
        CurrentAppointment = appointment;
        WorkOrder? workOrder = _allOrders.FirstOrDefault(o => o.WorkOrderID == CurrentAppointment.WorkOrderID);
        CurrentAppointment.WorkOrder = workOrder;
        _clickedSlotContext = null;
        MenuItems = new List<ContextMenuItem>();
        if(appointment.IsWorkOrder)
        {
            MenuItems.Add(new ContextMenuItem { Text = "Open order", CommandName = "OpenOrder", Icon = SvgIcon.FolderOpen }); 
            MenuItems.Add(new ContextMenuItem { Text = @Localizer["WorkOrder_AddActivity"], CommandName = "AddActivity", Icon = SvgIcon.Plus });
        }
        else
        {
            MenuItems.Add(new ContextMenuItem { Text = "Open order", CommandName = "OpenOrder", Icon = SvgIcon.FolderOpen });
            MenuItems.Add(new ContextMenuItem { Text = "Open activity", CommandName = "OpenActivity", Icon = SvgIcon.FolderOpen });
        }   
        await ContextMenuRef?.ShowAsync(e.ClientX, e.ClientY)!;
    }

    private void OnMenuItemClick(ContextMenuItem item)
    {
        switch (item.CommandName)
        {
            case "AddActivity":
                OnAddActivity();
                break;
            case "AddWorkOrder":
                OnAddWorkOrder();
                break;
            case "OpenOrder":
                OpenOrder();
                break;
            case "OpenActivity":
                OpenActivity();
                break;
        }
    }
    #endregion
    private void OnAddActivity()
    {
        Console.WriteLine($"[{currentUser.Name}]:  Adding new activity at {_clickedSlotContext?.Start}");
        if (_clickedSlotContext != null) //from empty slot
        {
            newActivityInitialStartDate = _clickedSlotContext.Start;
            newActivityInitialEndDate = _clickedSlotContext.End;
            //try to find WorkOrder in this slot
            var WO_ID_InSlot = _allOrders.FirstOrDefault(wo => isWOinTimeSlot(wo, _clickedSlotContext.Start, _clickedSlotContext.End)).WorkOrderID;
            if (WO_ID_InSlot != 0)
            {
                CurrentAppointment = _allAppointments.FirstOrDefault(a => a.WorkOrderID == WO_ID_InSlot && a.IsWorkOrder);
            }            
            showNewActivityForm = true;
            StateHasChanged();
        }
        else if(CurrentAppointment != null)//from appointment
        {
            var WO_activities = _allAppointments.Where(a => a.WorkOrderID == CurrentAppointment.WorkOrderID && !a.IsWorkOrder).ToList();
            var lastActivity = WO_activities.OrderByDescending(a => a.End).FirstOrDefault();
            if (lastActivity != null)
            {
                NewActivityTime = lastActivity.End;
            }
            else
            {
                NewActivityTime = CurrentAppointment.Start;
            }

            ShowAddActivityForOrderForm = true;
        }
    }

    private void OpenOrder()
    {
        Console.WriteLine($"[{currentUser.Name}]:  Open order: {CurrentAppointment?.WorkOrderID}");
        WOEditFormShown = true;
        isOrderCardOpen = true;
    }

    private void OpenActivity()
    {
        Console.WriteLine($"[{currentUser.Name}]:  Open activity: {CurrentAppointment?.Title}");
        ShowActivityCard = true;
    }
    private void OnAddWorkOrder()
    {
        // Console.WriteLine($"[{currentUser.Name}]:  Adding new work order at {_clickedSlotContext?.Start}");
        // if (_clickedSlotContext != null)
        // {
        //     bool isStartEqualsEnd = _clickedSlotContext.Start == _clickedSlotContext.End;
        //     CurrentAppointment = new ActivityAppointment()
        //     {
        //         Start = isStartEqualsEnd ? _clickedSlotContext.Start.AddHours(8) : _clickedSlotContext.Start,
        //         End = isStartEqualsEnd ? _clickedSlotContext.Start.AddHours(16) : _clickedSlotContext.End,
        //         IsAllDay = true
        //     };
        //     if (_clickedSlotContext.Resources != null && _clickedSlotContext.Resources.Any())
        //     {
        //         var personResource = _clickedSlotContext.Resources.FirstOrDefault(r => r.Key == "AssignedPerson");
        //         if (personResource.Key != null && personResource.Value is string personName)
        //         {
        //             CurrentAppointment.AssignedPerson = personName;
        //         }
        //     }
        //     customEditFormShown = true;
        //     StateHasChanged();
        // }
    }

    async Task RefreshData(SchedulerAppointment? editedAppointment)
    {
        //all changes only in cache
        if (editedAppointment == null)//was removed or cancelled NEW
        {
            WOEditFormShown = false;
            isOrderCardOpen = false;
            return;
        }
        else
        {
            var index = _allAppointments.FindIndex(a => a.AppointmentId == editedAppointment.AppointmentId);
            if (index != -1)
            {
                _allAppointments[index] = new ActivityAppointment(editedAppointment);
            }
            else
                _allAppointments.Add(new ActivityAppointment(editedAppointment));
        }
        WOEditFormShown = false;
        isOrderCardOpen = false;
        //await LoadData();
        SchedulerRef?.Rebind();
    }

    private void CancelNewActivityForm()
    {
        showNewActivityForm = false;
        StateHasChanged();
    }

    private void OnNewActivityAdded(Models.Activity? newActivity)
    {
        showNewActivityForm = false;
        ShowAddActivityForOrderForm = false;
        if (newActivity != null)
        {
            activities.Add(newActivity);
            _allAppointments.Add(new ActivityAppointment(newActivity));
            DisplayAppointments();
        }
        else
        {
            //provide error message?
        }
        StateHasChanged();
    }

    private bool isWOinTimeSlot(WorkOrder wo, DateTime slotStart, DateTime slotEnd)
    {        
        return (wo.StartDate <= slotEnd && wo.EndDate >= slotStart);
    }
}
