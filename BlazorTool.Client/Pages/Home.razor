@page "/"
@using BlazorTool.Client.Components
@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resources.UIStrings> Localizer
@inject ApiServiceClient ApiClient
@inject UserState UserState
@inject ViewSettingsService ViewSettingsService

<BlazorTool.Client.Components.CheckSession ApiService="@ApiClient" UserState="@UserState" />

<div class="orders-grid-container">

	<TelerikLoaderContainer  Visible="@isDataLoading" Text="@Localizer["Scheduler_LoadingOrders"]" Size="@Telerik.Blazor.ThemeConstants.Loader.Size.Large">
				</TelerikLoaderContainer>
	<span class="order-title">@Localizer["Home_MyAssignedOrders"]: @myAssignedOrders.Count()</span>
	<OrdersGrid @key="@assignedGridKey"
			   OrdersForGrid="@myAssignedOrders"
			   workOrderStates="@workOrderStates"
			   @ref="@AssignedGrid"
			   ShowSearchBar = "false"
			   OnOrderChanged="@((app) => OnOrderChanged(app))"
               OnStateChanged="@(async (GridStateEventArgs<WorkOrder> args) => { _assignedGridSettings.GridState = args.GridState; await SaveStateAsync(AssignedGridSettingsKey, _assignedGridSettings); })"
			   />
</div>

<div class="orders-grid-container">
		
	<div style="display:flex; align-items:center;">
		<span class="order-title">@Localizer["Home_MyTakenOrders"]: @myTakenWorkOrders.Count()</span><span class=@(UserState.CanHaveManyActiveTake ? "can-have-many" : "cannot-have-many")>(@(UserState.CanHaveManyActiveTake ? @Localizer["CanHaveManyTakenOrders"] : @Localizer["CannotHaveManyTakenOrders"]))</span>
	</div>
	<OrdersGrid @key="@takenGridKey"
			   OrdersForGrid="@myTakenWorkOrders"
			   workOrderStates="@workOrderStates"
			   @ref="@TakenGrid"
			   ShowSearchBar = "false"	
			   OnOrderChanged="@((app) => OnOrderChanged(app))"
               OnStateChanged="@(async (GridStateEventArgs<WorkOrder> args) => { _takenGridSettings.GridState = args.GridState; await SaveStateAsync(TakenGridSettingsKey, _takenGridSettings); })"
			   />

</div>

<div class="orders-grid-container">
<div class="order-header">
	<span class="order-title">@Localizer["Home_OrdersForDepartment"]: @myDepartmentOrders.Count() </span>
			<TelerikComboBox Data="@allDepartments" TextField="Department"
							 Placeholder="@Localizer["Scheduler_SelectDepartment"]" Filterable="false"
							 AllowCustom="false" Value="@selectedDepartment"
							 ValueChanged="@((string dep) => OnDepartmentChanged(dep))"
							 Width="250px"
							 Size="sm">
			</TelerikComboBox>
</div>
	<OrdersGrid @key="@depsGridKey"
			   OrdersForGrid="@myDepartmentOrders"
			   workOrderStates="@workOrderStates"
			   @ref="@DepsGrid"
			   ShowSearchBar = "false"
			   isLoading="@isDataLoading"
			   OnOrderChanged="@((app) => OnOrderChanged(app))"
               OnStateChanged="@(async (GridStateEventArgs<WorkOrder> args) => { _departmentGridSettings.GridState = args.GridState; await SaveStateAsync(DepartmentGridSettingsKey, _departmentGridSettings); })"
			   />
</div>

@code {
    private const string AssignedGridSettingsKey = "home-assigned-orders-grid";
    private const string TakenGridSettingsKey = "home-taken-orders-grid";
    private const string DepartmentGridSettingsKey = "home-department-orders-grid";

    private ViewSettings<WorkOrder> _assignedGridSettings = new();
    private ViewSettings<WorkOrder> _takenGridSettings = new();
    private ViewSettings<WorkOrder> _departmentGridSettings = new();

	private List<WorkOrder> myAssignedOrders = new List<WorkOrder>();
	private List<WorkOrder> myDepartmentOrders = new List<WorkOrder>();    
	private List<WorkOrder> myTakenWorkOrders = new List<WorkOrder>();
	private OrdersGrid TakenGrid;
	private OrdersGrid AssignedGrid;
	private OrdersGrid DepsGrid;
	private Guid takenGridKey = Guid.NewGuid();
	private Guid assignedGridKey = Guid.NewGuid();
	private Guid depsGridKey = Guid.NewGuid();
	private List<string> workOrderStates = new List<string>();
	private List<string> allDepartments = new List<string>();
	private string selectedDepartment = string.Empty;
	private List<WorkOrder> allOrders = new List<WorkOrder>();
	private bool isDataLoading = true;
    private bool hasInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;
            isDataLoading = true;
            await InvokeAsync(StateHasChanged);

            _assignedGridSettings = await ViewSettingsService.LoadSettingsAsync<WorkOrder>(AssignedGridSettingsKey);
            _takenGridSettings = await ViewSettingsService.LoadSettingsAsync<WorkOrder>(TakenGridSettingsKey);
            _departmentGridSettings = await ViewSettingsService.LoadSettingsAsync<WorkOrder>(DepartmentGridSettingsKey);

            if (UserState.IsAuthenticated)
            {
                allOrders = await ApiClient.GetWorkOrdersAsync();
                allOrders = FilterWorkOrders(allOrders);
                await ApiClient.GetWODictionaries(UserState.PersonID, UserState.LangCode);
                allDepartments = ApiClient.GetWODepartments().Select(d => d.Name).ToList();
                selectedDepartment = _departmentGridSettings.GetCustomFilter("selectedDepartment", allDepartments.FirstOrDefault() ?? "");
                workOrderStates = allOrders.Select(o => o.WOState ?? string.Empty).Distinct().ToList();
                TakeListsOrders();
            }

            isDataLoading = false;
            await InvokeAsync(StateHasChanged);

            // Apply the state after the data is loaded and the grids are rendered
            if (AssignedGrid != null) await AssignedGrid.ApplyStateAsync(_assignedGridSettings.GridState);
            if (TakenGrid != null) await TakenGrid.ApplyStateAsync(_takenGridSettings.GridState);
            if (DepsGrid != null) await DepsGrid.ApplyStateAsync(_departmentGridSettings.GridState);
        }
    }

    private async Task SaveStateAsync(string key, ViewSettings<WorkOrder> settings)
    {
        if (key == DepartmentGridSettingsKey)
        {
            settings.SetCustomFilter("selectedDepartment", selectedDepartment);
        }
        await ViewSettingsService.SaveSettingsAsync(key, settings);
    }

	private async Task OnDepartmentChanged(string department)
	{
		selectedDepartment = department;
		myDepartmentOrders = allOrders.Where(o => o.DepName == selectedDepartment).ToList();
		await SaveStateAsync(DepartmentGridSettingsKey, _departmentGridSettings);
		StateHasChanged();
	}

	private async Task OnOrderChanged(SchedulerAppointment app)
	{
		if (app == null) return;
		allOrders = await ApiClient.GetWorkOrdersCachedAsync();
		allOrders = FilterWorkOrders(allOrders);
		TakeListsOrders();
		StateHasChanged();
	}

	private void TakeListsOrders()
	{
		myDepartmentOrders = allOrders.Where(o => o.DepName == selectedDepartment).ToList();
		myAssignedOrders = allOrders.Where(o => o.AssignedPerson == UserState.UserName).ToList();
		myTakenWorkOrders = allOrders.Where(o => o.CloseDate == null).Where(o => o.TakePersons?.Split('#').Contains(UserState.PersonID.ToString()) ?? false).ToList();
		StateHasChanged();
	}
	private void ConsoleLogOrder(string listName, List<WorkOrder> orders)
	{
		Console.WriteLine($"========== Logging orders for: {listName} ================");
		foreach (var order in orders)
		{
			Console.WriteLine($"Order ID: {order.WorkOrderID}, Title: {order.TakePersons}, State: {order.WOState}");
		}
		Console.WriteLine($"========== End of orders for: {listName} ================");
	}

	private List<WorkOrder> FilterWorkOrders(List<WorkOrder> orders)
	{
		return orders
			.Where(o => o.CloseDate == null)
			.OrderByDescending(o => o.ModDate)
            .ToList();
	}
}