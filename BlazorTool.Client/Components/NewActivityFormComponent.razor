@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using Telerik.Blazor.Components
@using System.ComponentModel.DataAnnotations
@inject IStringLocalizer<Resources.UIStrings> Localizer

@inject ApiServiceClient ApiClient
@inject UserState UserState

<div class="add-activity-form-container">
    <TelerikForm Model="@ActivityFormModel" OnValidSubmit="@HandleValidSubmit">
        <FormValidation>
            <DataAnnotationsValidator />
        </FormValidation>
        <FormItems>
            <div class="form-layout">
                <div class="form-left">
                    <FormItem Field="@nameof(ActivityFormModel.DeviceID)">
                        <Template>
                            <div style="display: flex; align-items: center;">
                                <label class="k-label k-form-label" style="min-width: @minWidthLabel; margin-right: 10px;">@Localizer["Device"] [@ActivityFormModel.DeviceID]:</label>
                                <TelerikComboBox Data="@Devices" 
                                                 @bind-Value="@ActivityFormModel.DeviceID"
                                                 ValueField="@nameof(Device.MachineID)"
                                                 TextField="@nameof(Device.AssetNo)"
                                                 Placeholder="@Localizer["Select_Device"]"
                                                 Filterable="true"
                                                 FilterOperator="@Telerik.Blazor.StringFilterOperator.Contains"
                                                 ShowClearButton="true"
                                                 OnChange="@OnDeviceChanged">
                                </TelerikComboBox>
                            </div>
                            <ValidationMessage For="@(() => ActivityFormModel.DeviceID)" />
                        </Template>
                    </FormItem>

                    <FormItem Field="@nameof(ActivityFormModel.WorkOrderID)">
                        <Template>
                            <div style="display: flex; align-items: center;">
                                <label class="k-label k-form-label" style="min-width: @minWidthLabel; margin-right: 10px;">@Localizer["WorkOrder"] [@ActivityFormModel.WorkOrderID]:</label>
                                <TelerikComboBox Data="@WorkOrders"
                                                 @bind-Value="@ActivityFormModel.WorkOrderID"
                                                 ValueField="@nameof(WorkOrder.WorkOrderID)"
                                                 TextField="@nameof(WorkOrder.WODesc)"
                                                 Placeholder="@Localizer["SelectWorkOrder"]"
                                                 Filterable="true"
                                                 FilterOperator="@Telerik.Blazor.StringFilterOperator.Contains"
                                                 ShowClearButton="true"
                                                 OnChange="@OnWorkOrderChanged">
                                </TelerikComboBox>
                            </div>
                            <ValidationMessage For="@(() => ActivityFormModel.WorkOrderID)" />
                        </Template>
                    </FormItem>

                    <FormItem Field="@nameof(ActivityFormModel.ActivityCategoryID)">
                        <Template>
                            <div style="display: flex; align-items: center;">
                                <label class="k-label k-form-label" style="min-width: @minWidthLabel; margin-right: 10px;">@Localizer["Activity_Category"]:</label>
                                <TelerikComboBox Data="@ActivityCategories"
                                                 @bind-Value="@ActivityFormModel.ActivityCategoryID"
                                                 ValueField="@nameof(WODict.Id)"
                                                 TextField="@nameof(WODict.Name)"
                                                 Placeholder="@Localizer["OrdersPage_SelectCategory"]"
                                                 Filterable="true"
                                                 FilterOperator="@Telerik.Blazor.StringFilterOperator.Contains"
                                                 ShowClearButton="true">
                                </TelerikComboBox>
                            </div>
                            <ValidationMessage For="@(() => ActivityFormModel.ActivityCategoryID)" />
                        </Template>
                    </FormItem>

                    <FormItem Field="@nameof(ActivityFormModel.Cost)">
                        <Template>
                            <div style="display: flex; align-items: center;">
                                <label class="k-label k-form-label" style="min-width: @minWidthLabel; margin-right: 10px;">@Localizer["Cost"]:</label>
                                <TelerikNumericTextBox @bind-Value="@ActivityFormModel.Cost" Placeholder="@Localizer["ActivityList_Cost_Placeholder"]" />
                            </div>
                            <ValidationMessage For="@(() => ActivityFormModel.Cost)" />
                        </Template>
                    </FormItem>
                </div>

                <div class="form-right">
                    <FormItem Field="@nameof(ActivityFormModel.Description)">
                        <Template>
                            <div style="display: flex; align-items: center;">
                                <label class="k-label k-form-label" style="min-width:@minWidthLabel; margin-right: 10px;">@Localizer["ActivityList_Description"]:</label>
                                <TelerikTextArea @bind-Value="@ActivityFormModel.Description" Rows="5" Placeholder="@Localizer["ActivityList_Description_Placeholder"]" />
                            </div>
                            <ValidationMessage For="@(() => ActivityFormModel.Description)" />
                        </Template>
                    </FormItem>

                    <FormItem Field="@nameof(ActivityFormModel.ActDate)">
                        <Template>
                            <div style="display: flex; align-items: center;">
                                <label class="k-label k-form-label" style="min-width:@minWidthLabel; margin-right: 10px;">@Localizer["ActivityList_ActDate"]:</label>
                                <TelerikDateTimePicker @bind-Value="@ActivityFormModel.ActDate"
                                                       Placeholder="@Localizer["ActivityList_ActDate_Placeholder"]"
                                                       Format="dd MMMM yyyy HH:mm"
                                                       OnChange="@OnDateChanged" />
                            </div>
                            <ValidationMessage For="@(() => ActivityFormModel.ActDate)" />
                        </Template>
                    </FormItem>

                    <FormItem Field="@nameof(ActivityFormModel.EndDate)">
                        <Template>
                            <div style="display: flex; align-items: center;">
                                <label class="k-label k-form-label" style="min-width:@minWidthLabel; margin-right: 10px;">@Localizer["ActivityList_EndDate"]:</label>
                                <TelerikDateTimePicker @bind-Value="@ActivityFormModel.EndDate"
                                                       Placeholder="@Localizer["ActivityList_EndDate_Placeholder"]"
                                                       Format="dd MMMM yyyy HH:mm"
                                                       OnChange="@OnDateChanged" />
                            </div>
                            <ValidationMessage For="@(() => ActivityFormModel.EndDate)" />
                        </Template>
                    </FormItem>
                </div>
            </div>
        </FormItems>
        <FormButtons>
            <div style="display: flex; justify-content: center; gap: 50px; width: 100%;">
                <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="primary">@Localizer["Add"]</TelerikButton>
                <TelerikButton ButtonType="ButtonType.Button" OnClick="@OnCancelhandler" ThemeColor="secondary">@Localizer["Settings_Cancel"]</TelerikButton>
            </div>
        </FormButtons>
    </TelerikForm>
    <div class="form-footer">
        <p>@ErrorMessage</p>
    </div>
</div>

@code {
    [Parameter]
    public DateTime InitialStartDate { get; set; }

    [Parameter]
    public DateTime InitialEndDate { get; set; }

    [Parameter]
    public int? WorkOrderID { get; set; }

    [Parameter]
    public EventCallback<Activity?> OnActivityAdded { get; set; }

    private NewActivityFormModel ActivityFormModel { get; set; } = new NewActivityFormModel();
    private List<Device> Devices { get; set; } = new List<Device>();
    private List<WorkOrder> WorkOrders { get; set; } = new List<WorkOrder>();
    private List<WODict> ActivityCategories { get; set; } = new List<WODict>();
    private string ErrorMessage { get; set; } = string.Empty;
    private string minWidthLabel = "180px";

    protected override async Task OnInitializedAsync()
    {
        ActivityFormModel.PersonID = UserState.PersonID ?? 0;
        ActivityFormModel.ActDate = InitialStartDate;
        ActivityFormModel.EndDate = InitialEndDate;
        ActivityFormModel.Cost = 0;
        ActivityFormModel.WorkOrderID = WorkOrderID ?? 0;
        Devices = await ApiClient.GetAllDevicesAsync();
        // Initially load all work orders, or none, depending on desired behavior
        // For now, let's load all work orders if no device is selected initially
        WorkOrders = await ApiClient.GetWorkOrdersCachedAsync();
        var wo = WorkOrders.FirstOrDefault(w => w.WorkOrderID == ActivityFormModel.WorkOrderID);
        ActivityFormModel.DeviceID = Devices.FirstOrDefault(d=>d.MachineID == wo?.MachineID)?.MachineID ?? 0;
        ActivityCategories = await ApiClient.GetActCategoriesByDeviceCategory(wo?.DeviceCategoryID ?? 0);
        // If an initial device is set (e.g., from a context menu on a device-specific scheduler)
        // you might want to pre-filter WorkOrders here.
        // For now, categories will be loaded when a WorkOrder is selected.
    }

    private async Task OnDeviceChanged(object value)
    {
        if (value is int deviceId && deviceId > 0)
        {
            WorkOrders = await ApiClient.GetWorkOrdersCachedAsync(deviceId);
            ActivityFormModel.WorkOrderID = 0; // Reset WorkOrder selection
            var devCategory = Devices.FirstOrDefault(d=>d.MachineID == deviceId)?.CategoryID;
            ActivityCategories = await ApiClient.GetActCategoriesByDeviceCategory(devCategory);
        }
        else
        {
            WorkOrders = await ApiClient.GetWorkOrdersCachedAsync(); // Load all if no device selected
            ActivityFormModel.WorkOrderID = 0;
            ActivityCategories.Clear();
        }
    }

    private void OnWorkOrderChanged(object value)
    {
        
    }

    private void OnDateChanged(object value)
    {
        // Re-evaluate workload if dates change
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        // Calculate WorkLoad based on ActDate and EndDate
        decimal workLoad = (decimal)(ActivityFormModel.EndDate - ActivityFormModel.ActDate).TotalHours;
        if (workLoad < 0) workLoad = 0; // Ensure non-negative workload

        var addActivity = new AddActivity
        {
            WorkOrderID = ActivityFormModel.WorkOrderID,
            PersonID = ActivityFormModel.PersonID,
            CategoryID = ActivityFormModel.ActivityCategoryID,
            WorkLoad = workLoad,
            Description = ActivityFormModel.Description,
            Cost = ActivityFormModel.Cost,
            ActDate = ActivityFormModel.ActDate
        };

        var response = await ApiClient.CreateActivityAsync(addActivity);
        if (response.IsValid)
        {
            // Reset model for next entry
            ActivityFormModel = new NewActivityFormModel
            {
                PersonID = UserState.PersonID ?? 0,
                ActDate = InitialStartDate,
                EndDate = InitialEndDate,
                Cost = 0
            };
            var acts = await ApiClient.GetActivitiesByWO(addActivity.WorkOrderID);
            var newActivity = acts.FirstOrDefault(a => a.ActivityID == response.Data.ActivityID);
            await OnActivityAdded.InvokeAsync(newActivity);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Error creating activity: {string.Join(", ", response.Errors)}");
            ErrorMessage = $"Error creating activity: {string.Join(", ", response.Errors)}";
            await OnActivityAdded.InvokeAsync(null);
        }
    }

    private void OnCancelhandler()
    {
        ActivityFormModel = new NewActivityFormModel
        {
            PersonID = UserState.PersonID ?? 0,
            ActDate = InitialStartDate,
            EndDate = InitialEndDate,
            Cost = 0
        };
        ErrorMessage = string.Empty;
        OnActivityAdded.InvokeAsync(null);
    }
}
