@using Microsoft.AspNetCore.Components.Web
@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using BlazorTool.Client.Components
@using System.Text
@using System.Linq
@using System.Diagnostics
@using Telerik.DataSource.Extensions
@using Telerik.Blazor
@inject UserState UserState
@inject ApiServiceClient apiService
@inject IStringLocalizer<Resources.UIStrings> Localizer

@rowStyles

<TelerikGrid Data="@OrdersForGrid"
             Id="Grid1"
             RowDraggable="false"
             @ref="GridRef"
             ScrollMode="@(UseVirtualScrollMode? GridScrollMode.Virtual: GridScrollMode.Scrollable)"
             Height="@Height"
             PageSize="@PageSize"
             RowHeight="40"
             Sortable="true"
             Resizable="true"
             Pageable="@(!UseVirtualScrollMode)"
             FilterMode="@GridFilterMode.FilterMenu"
             OnRowRender="@OnRowRenderHandler"
             OnRowDoubleClick="@(args => OnRowClick(args))"
             OnRowContextMenu="@OnRowContextMenuHandler"
             OnStateChanged="@((GridStateEventArgs<WorkOrder> args) => OnStateChanged.InvokeAsync(args))"
             Class="@(ShowSearchBar ? "" : "no-toolbar")"
             >

    <GridToolBarTemplate>
        @if (ShowSearchBar)
        {
            <GridSearchBox Width="200px" DebounceDelay="500"/>
            @if(UserState.HasPermission(PermissionType.WO_Add))
            {
                <TelerikButton Icon="@SvgIcon.Plus" Rounded="lg" Size="lg" ThemeColor="primary" OnClick="@AddNewOrderWindow">@Localizer["Scheduler_AddNew"]</TelerikButton>
            }
        }
    </GridToolBarTemplate>
    <GridColumns>
        <GridColumn Field="@nameof(WorkOrder.WorkOrderID)" Title="ID" Width="5rem" Filterable="true" Editable="false" Visible="true">
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.WODesc)" Editable="false" Visible="false" Title="@Localizer[nameof(WorkOrder.WODesc)]"></GridColumn>
        <GridColumn Field="@nameof(WorkOrder.DepName)" Title="@Localizer[nameof(WorkOrder.DepName)]" Width="8rem" Resizable="true">
            <FilterMenuTemplate>
                <CheckBoxFilterMenuTemplate Values="@dicts.Where(d => d.ListType == (int)WOListTypeEnum.Department).Select(d => d.Name).Distinct()"
                                          context="@context"
                                          NameOfField="@nameof(WorkOrder.DepName)">
                </CheckBoxFilterMenuTemplate>
            </FilterMenuTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.AssetNo)" Title="@Localizer[nameof(WorkOrder.AssetNo)]" Resizable="true" Filterable="false"></GridColumn>
        <GridColumn Field="@nameof(WorkOrder.WODesc)" Resizable="true" Filterable="true" Title="@Localizer[nameof(WorkOrder.WODesc)]">
            <Template>
                @{
                    var item = context as WorkOrder;
                    if (item != null)
                    {
                        <div class="description-cell">@item.WODesc</div>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.WOReason)" Resizable="true" Title="@Localizer[nameof(WorkOrder.WOReason)]">
            <FilterMenuTemplate>
                <CheckBoxFilterMenuTemplate Values="@dicts.Where(d => d.ListType == (int)WOListTypeEnum.Reason).Select(d => d.Name).Distinct()"
                                          context="@context"
                                          NameOfField="@nameof(WorkOrder.WOReason)">
                </CheckBoxFilterMenuTemplate>
            </FilterMenuTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.ModPerson)" Resizable="true" Title="@Localizer[nameof(WorkOrder.ModPerson)]">
            <FilterMenuTemplate>
                <CheckBoxFilterMenuTemplate Values="@allPersons.Select(x => x.Name).ToList()"
                                          context="@context"
                                            NameOfField="@nameof(WorkOrder.ModPerson)">
                </CheckBoxFilterMenuTemplate>
            </FilterMenuTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.AssignedPerson)" Resizable="true" Title="@Localizer[nameof(WorkOrder.AssignedPerson)]">
            <FilterMenuTemplate>
                <CheckBoxFilterMenuTemplate Values="@allPersons.Select(x => x.Name).ToList()"
                                          context="@context"
                                            NameOfField="@nameof(WorkOrder.AssignedPerson)">
                </CheckBoxFilterMenuTemplate>
            </FilterMenuTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.WOState)" Resizable="true" Title="@Localizer[nameof(WorkOrder.WOState)]">
            <FilterMenuTemplate>
                <CheckBoxFilterMenuTemplate Values="@workOrderStates"
                                          context="@context"
                                            NameOfField="@nameof(WorkOrder.WOState)">
                </CheckBoxFilterMenuTemplate>
            </FilterMenuTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.WOLevel)" Resizable="true" Title="@Localizer[nameof(WorkOrder.WOLevel)]">
            <FilterMenuTemplate>
                <CheckBoxFilterMenuTemplate Values="@dicts.Where(d => d.ListType == (int)WOListTypeEnum.Level).Select(d => d.Name).Distinct()"
                                          context="@context"
                                            NameOfField="@nameof(WorkOrder.WOLevel)">
                </CheckBoxFilterMenuTemplate>
            </FilterMenuTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.AddDate)" Width="@dateColumnsize" DisplayFormat="{0:yyyy.MM.dd HH:mm}" Resizable="true" Title="@Localizer[nameof(WorkOrder.AddDate)]">
            <FilterMenuButtonsTemplate Context="filterContext">
                <div class="vertical-stack-container">
                    <div class="stack-item">
                        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(async _ => await filterContext.FilterAsync())">@Localizer["OrdersPage_Filter"] </TelerikButton>
                        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Info" OnClick="@(() => ClearFilterAsync(filterContext))">@Localizer["OrdersPage_Clear"]</TelerikButton>
                    </div>
                    <div class="stack-item">
                        <TelerikButton OnClick="@(() => FilterByDateRange(filterContext, nameof(WorkOrder.AddDate), "year"))">@Localizer["OrdersPage_LastYear"]</TelerikButton>
                        <TelerikButton OnClick="@(() => FilterByDateRange(filterContext, nameof(WorkOrder.AddDate), "quarter"))">@Localizer["OrdersPage_Quarter"]</TelerikButton>
                        <TelerikButton OnClick="@(() => FilterByDateRange(filterContext, nameof(WorkOrder.AddDate), "month"))">@Localizer["OrdersPage_Month"]</TelerikButton>
                    </div>
                </div>
            </FilterMenuButtonsTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.StartDate)" Width="@dateColumnsize" Title="@Localizer[nameof(WorkOrder.StartDate)]" DisplayFormat="{0:yyyy.MM.dd HH:mm}" Resizable="true">
            <FilterMenuButtonsTemplate Context="filterContext">
                <div class="vertical-stack-container">
                    <div class="stack-item">
                        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(async _ => await filterContext.FilterAsync())">@Localizer["OrdersPage_Filter"] </TelerikButton>
                        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Info" OnClick="@(() => ClearFilterAsync(filterContext))">@Localizer["OrdersPage_Clear"]</TelerikButton>
                    </div>
                    <div class="stack-item">
                        <TelerikButton OnClick="@(() => FilterByDateRange(filterContext, nameof(WorkOrder.StartDate), "year"))">@Localizer["OrdersPage_LastYear"]</TelerikButton>
                        <TelerikButton OnClick="@(() => FilterByDateRange(filterContext, nameof(WorkOrder.StartDate), "quarter"))">@Localizer["OrdersPage_Quarter"]</TelerikButton>
                        <TelerikButton OnClick="@(() => FilterByDateRange(filterContext, nameof(WorkOrder.StartDate), "month"))">@Localizer["OrdersPage_Month"]</TelerikButton>
                    </div>
                </div>
            </FilterMenuButtonsTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.EndDate)" Width="@dateColumnsize" DisplayFormat="{0:yyyy.MM.dd HH:mm}" Resizable="true" Title="@Localizer[nameof(WorkOrder.EndDate)]">
            <FilterMenuButtonsTemplate Context="filterContext">
                <div class="vertical-stack-container">
                    <div class="stack-item">
                        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(async _ => await filterContext.FilterAsync())">@Localizer["OrdersPage_Filter"] </TelerikButton>
                        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Info" OnClick="@(() => ClearFilterAsync(filterContext))">@Localizer["OrdersPage_Clear"]</TelerikButton>
                    </div>
                    <div class="stack-item">
                        <TelerikButton OnClick="@(() => FilterByDateRange(filterContext, nameof(WorkOrder.EndDate), "year"))">@Localizer["OrdersPage_LastYear"]</TelerikButton>
                        <TelerikButton OnClick="@(() => FilterByDateRange(filterContext, nameof(WorkOrder.EndDate), "quarter"))">@Localizer["OrdersPage_Quarter"]</TelerikButton>
                        <TelerikButton OnClick="@(() => FilterByDateRange(filterContext, nameof(WorkOrder.EndDate), "month"))">@Localizer["OrdersPage_Month"]</TelerikButton>
                    </div>
                </div>
            </FilterMenuButtonsTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WorkOrder.CloseDate)" Width="@dateColumnsize" DisplayFormat="{0:yyyy.MM.dd HH:mm}" Visible="false" Resizable="true" Title="@Localizer[nameof(WorkOrder.CloseDate)]"></GridColumn>
    </GridColumns>
</TelerikGrid>

<TelerikContextMenu @ref="@ContextMenuRef" Data="@MenuItems" OnClick="@(async (ContextMenuItem item) => await OnContextMenuItemClick(item))" TextField="@nameof(ContextMenuItem.Text)">
</TelerikContextMenu>

<TelerikWindow @bind-Visible="@isOrderCardOpen"
               CloseOnOverlayClick="true"
               Modal="true"
               Width="1280px"
               MaxHeight="95vh"
               ThemeColor="@ThemeConstants.Window.ThemeColor.Dark">
    <WindowTitle>
        <strong>
            @if(selectedOrder.WorkOrderID == 0) {
                @Localizer["NewOrder"]  
            }else{
                @Localizer["WorkOrder_OrderNo"] @selectedOrder.WorkOrderID 
            }
       </strong >

    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" OnClick="@CancelEditing" />
    </WindowActions>
    <WindowContent>
        <AppointmentEditor Appointment="@selectedAppointment" 
                          isEditable=@UserState.HasPermission(PermissionType.WO_Edit) 
                          ListPersons="@personNames.Where(c=>c != "All").ToList()"
                          currentUser="@currentUser"
                          OnComponentClosing="@OnCloseWorkOrderWindow"
                          OnRefreshData="@((app) => OnRefreshData(app))"
                          isScheduler="false" />
    </WindowContent>
</TelerikWindow>

@code {
    [Parameter] public List<WorkOrder> OrdersForGrid { get; set; } = new List<WorkOrder>();
    [Parameter] public EventCallback<SchedulerAppointment> OnOrderChanged { get; set; }
    [Parameter] public List<string> workOrderStates { get; set; } = new List<string>();
    [Parameter] public bool ShowSearchBar { get; set; } = true;
    [Parameter] public bool isLoading { get; set; } = false;
    [Parameter] public bool UseVirtualScrollMode { get; set; } = true;
    [Parameter] public int PageSize { get; set; } = 30;
    [Parameter] public string Height { get; set; } = "100%";
    [Parameter] public EventCallback<GridStateEventArgs<WorkOrder>> OnStateChanged { get; set; }
    [Parameter] public List<ContextMenuItem> MenuItems { get; set; }
    [Parameter] public EventCallback<ContextMenuItemClickEventArgs<WorkOrder>> OnMenuItemClick { get; set; }
    [Parameter] public EventCallback<ContextMenuItemClickEventArgs<WorkOrder>> OnRowContextMenu { get; set; }

    private TelerikContextMenu<ContextMenuItem> ContextMenuRef { get; set; }
    private WorkOrder SelectedRecord { get; set; }
    private Person currentUser { get; set; } = new Person();
    private List<Person> allPersons { get; set; } = new List<Person>();
    private List<string> personNames { get; set; } = new List<string>();
    private List<WODict> dicts { get; set; } = new List<WODict>();
    private bool isOrderCardOpen = false;
    private WorkOrder _selectedOrder;
    private WorkOrder selectedOrder
    {
        get => _selectedOrder;
        set
        {
            _selectedOrder = value;
            selectedAppointment = value != null ? new SchedulerAppointment(value): null;
        }
    }
    private SchedulerAppointment selectedAppointment;
    private string dateColumnsize = "9rem";
    public TelerikGrid<WorkOrder> GridRef { get; set; }
    private MarkupString rowStyles = new MarkupString();

    private double? lastCursorX;
    private double? lastCursorY;

    protected override async Task OnInitializedAsync()
    {
        allPersons = await apiService.GetAllPersons();
        await apiService.GetAllDevicesCachedAsync();
        personNames = allPersons.Select(p => p.Name).ToList();
        currentUser = new Person { PersonId = UserState.PersonID ?? 0, Name = UserState.UserName ?? string.Empty };
        dicts = await apiService.GetWODictionaries(UserState.PersonID, UserState.LangCode);
        rowStyles = RenderStatesStyle(OrdersForGrid.Select(x => x.StateColor).Where(c => !string.IsNullOrWhiteSpace(c)).Distinct());
    }

    protected override void OnParametersSet()
    {
        rowStyles = RenderStatesStyle(OrdersForGrid.Select(x => x.StateColor).Where(c => !string.IsNullOrWhiteSpace(c)).Distinct());
        base.OnParametersSet();
    }

    void OnRowRenderHandler(GridRowRenderEventArgs args)
    {
        var item = args.Item as WorkOrder;
        args.Class = " custom-row ";
        args.Class += GetStateColorClass(item);
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        var item = args.Item as WorkOrder;
        if (item != null)
        {
            selectedOrder = item;
            selectedAppointment = new SchedulerAppointment(item);
            isOrderCardOpen = true;
            StateHasChanged();
        }
    }

    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        OnRowClick(args);
    }

    async Task OnCloseWorkOrderWindow(SchedulerAppointment? editedAppointment)
    {
        if (editedAppointment == null)
        {
            isOrderCardOpen = false;
            return;
        }
        if (editedAppointment.AssignedPerson == Person.NotAssigned.Name)
            editedAppointment.AssignedPerson = string.Empty;
        selectedAppointment = editedAppointment;
        await OnOrderChanged.InvokeAsync(editedAppointment);
        isOrderCardOpen = false;
    }

    public async Task ApplyStateAsync(GridState<WorkOrder> state)
    {
        if (GridRef != null && state != null)
        {
            await GridRef.SetStateAsync(state);
        }
    }

    public void RefreshGrid()
    {
        if (GridRef != null)
        {
            GridRef.Rebind();
            StateHasChanged();
        }
    }

    private MarkupString RenderStatesStyle(IEnumerable<string?> uniqueColors)
    {
        var sb = new StringBuilder();
        sb.AppendLine("<style>");
        foreach (var color in uniqueColors)
        {
            var safeName = color?.TrimStart('#');

            if (!UserState.UseOriginalColors)
                switch (safeName?.ToLowerInvariant())
                {
                    case "lime":
                    case "1bf151":
                        safeName = "LightGreen";
                        break;
                    case "red":
                        safeName = "LightCoral";
                        break;
                    case "yellow":
                    case "ffff80":
                        safeName = "LightYellow";
                        break;
                    case "silver":
                        safeName = "LightSteelBlue";
                        break;
                    default:
                        break;
                }
            else
                safeName = color;

            sb.AppendLine($".k-grid .k-master-row.state-{color?.TrimStart('#')} {{");
            sb.AppendLine($"    background-color: {safeName};");
            sb.AppendLine("}");

            sb.AppendLine($".k-grid .k-master-row:hover {{");
            sb.AppendLine($"    filter: brightness(95%);");
            sb.AppendLine("}");
        }
        sb.AppendLine("</style>");

        return new MarkupString(sb.ToString());
    }

    private string GetStateColorClass(WorkOrder WO)
    {
        if (WO == null) return "";
        if (UserState.UseOriginalColors)
        {
            return "state-" + WO.StateColor.TrimStart('#');
        }
        return apiService.ConvertStateColor(WO.WOState);
    }

    private async Task FilterByDateRange(FilterMenuTemplateContext context, string field, string range)
    {
        DateTime now = DateTime.Now;
        DateTime from = now;
        switch (range)
        {
            case "year":
                from = now.AddYears(-1);
                break;
            case "quarter":
                from = now.AddMonths(-3);
                break;
            case "month":
                from = now.AddMonths(-1);
                break;
        }
        var filterDescriptor = context.FilterDescriptor;
        filterDescriptor.FilterDescriptors.Clear();
        filterDescriptor.LogicalOperator = FilterCompositionLogicalOperator.And;
        filterDescriptor.FilterDescriptors.Add(new FilterDescriptor()
        {
            Member = field,
            Operator = FilterOperator.IsGreaterThanOrEqualTo,
            MemberType = typeof(DateTime),
            Value = from
        });
        await context.FilterAsync();
    }

    private async Task ClearFilterAsync(FilterMenuTemplateContext filterContext)
    {
        await filterContext.ClearFilterAsync();
    }

    private async Task OnRefreshData(SchedulerAppointment? editedAppointment)
    {
        if (editedAppointment == null)
        {
            return;
        }
        selectedAppointment = editedAppointment;
        await OnOrderChanged.InvokeAsync(editedAppointment);
        GridRef?.Rebind();
        StateHasChanged();
    }

    void CancelEditing()
    {
        isOrderCardOpen = false;
    }

    public void AddNewOrderWindow()
    {
        selectedOrder = new WorkOrder
        {
            WorkOrderID = 0,
            AddDate = DateTime.Now,
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddDays(1),
            AssignedPerson = Person.NotAssigned.Name,
        };
        selectedAppointment = new SchedulerAppointment(selectedOrder);
        isOrderCardOpen = true;
    }

    public void OpenWorkOrderWindow(WorkOrder WO)
    {
        selectedOrder = WO;
        selectedAppointment = new SchedulerAppointment(WO);
        isOrderCardOpen = true;
    }

    async Task OnRowContextMenuHandler(GridRowClickEventArgs args)
    {
        SelectedRecord = args.Item as WorkOrder;
        var mouseEventArgs = args.EventArgs as MouseEventArgs;
        if (mouseEventArgs != null)
        {
            lastCursorX = mouseEventArgs.ClientX;
            lastCursorY = mouseEventArgs.ClientY;
            await ContextMenuRef.ShowAsync(mouseEventArgs.ClientX, mouseEventArgs.ClientY);
            var newMenuItemEventarg = new ContextMenuItemClickEventArgs<WorkOrder>()
            {
                Item = SelectedRecord,
                MenuItem = null
            };
            await OnRowContextMenu.InvokeAsync(newMenuItemEventarg);
        }
    }

    async Task OnContextMenuItemClick(ContextMenuItem item)
    {
        if (OnMenuItemClick.HasDelegate)
        {
            var menu = new ContextMenuItemClickEventArgs<WorkOrder>()
            {
                MenuItem = item,
                Item = SelectedRecord
            };
            menu.MenuItem.CursorX = lastCursorX ?? 200;
            menu.MenuItem.CursorY = lastCursorY ?? 200;
            await OnMenuItemClick.InvokeAsync(menu);
        }
    }
}